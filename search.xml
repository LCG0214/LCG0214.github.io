<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JVM入门到实战（一）</title>
    <url>/2024/07/02/JVM%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="JVM入门到实战（一）"><a href="#JVM入门到实战（一）" class="headerlink" title="JVM入门到实战（一）"></a>JVM入门到实战（一）</h1><h2 id="文章介绍"><a href="#文章介绍" class="headerlink" title="文章介绍"></a>文章介绍</h2><p>本篇文章是整理自学的知识点进行记录，我自学的课程是黑马程序员的<a href="https://www.bilibili.com/video/BV1r94y1b7eS/?spm_id_from=333.999.0.0">JVM课程</a>。想学习的话可自行到课程学习。</p>
<h2 id="JVM介绍"><a href="#JVM介绍" class="headerlink" title="JVM介绍"></a>JVM介绍</h2><ul>
<li><p>JVM 本质上是一个运行在计算机上的程序，他的职责是运行Java字节码文件。</p>
</li>
<li><p>你编写的Java代码，经过编译后产生<code>.class</code>的字节码文件（包含字节码指令），然后再JVM上运行，由JVM解释成机器语码交给计算机执行</p>
<p><img src="https://hexo.lcgui.cn/article/202407031030182.png" alt="image-20240703102503894"></p>
</li>
<li><p>JVM的功能：</p>
<ol>
<li><p>解释和运行： 对字节码文件中的指令， 实时的解释成机器码， 让计算机执行</p>
</li>
<li><p>内存管理： 自动为对象、方法等分配内存，自动垃圾回收机制回收不再使用的对象</p>
</li>
<li><p>即时编译：热点代码有的优化，提升效率（主要是为了支持跨平台特性）</p>
<p><img src="https://hexo.lcgui.cn/article/202407031038971.png" alt="image-20240703103806909"></p>
</li>
</ol>
</li>
<li><p>JVM的组成：类加载器、运行时数据区域、执行引擎</p>
<p><img src="https://hexo.lcgui.cn/article/202407031042998.png" alt="image-20240703104236935"></p>
</li>
</ul>
<h2 id="字节码文件介绍"><a href="#字节码文件介绍" class="headerlink" title="字节码文件介绍"></a>字节码文件介绍</h2><h3 id="字节码文件的组成"><a href="#字节码文件的组成" class="headerlink" title="字节码文件的组成"></a>字节码文件的组成</h3><p><img src="https://hexo.lcgui.cn/article/202407031114466.png" alt="image-20240703104900962"></p>
<ol>
<li><p>基本信息：包括魔数（CAFEBABE）、字节码文件的版本号(1.8对应51)、访问标识符、父类、接口等</p>
<p><img src="https://hexo.lcgui.cn/article/202407031114203.png" alt="image-20240703111452167"></p>
</li>
<li><p>常量池： 包括字符串常量、类和接口名、字段名主要在字节码指令中使用</p>
<p><img src="https://hexo.lcgui.cn/article/202407031115886.png" alt="image-20240703111532857"></p>
</li>
<li><p>字段：当前类或接口的字段信息</p>
<p><img src="https://hexo.lcgui.cn/article/202407031115728.png" alt="image-20240703111559700"></p>
</li>
<li><p>方法：当前类或接口声明的方法信息字节码指令</p>
<p><img src="https://hexo.lcgui.cn/article/202407031119731.png" alt="image-20240703111919679"></p>
</li>
<li><p>属性：类的属性，比如源码的文件名内部类类的列表等</p>
<p><img src="https://hexo.lcgui.cn/article/202407031117229.png" alt="image-20240703111715204"></p>
</li>
</ol>
<h3 id="字节码文件查看工具："><a href="#字节码文件查看工具：" class="headerlink" title="字节码文件查看工具："></a>字节码文件查看工具：</h3><ol>
<li>jclasslib应用程序：点击[这里](<a href="https://github.com/ingokegel/jclasslib/releases">Releases · ingokegel&#x2F;jclasslib (github.com)</a>)前往下载，因为是在GitHub上面需要自己用点魔法</li>
<li>jclasslib插件：Idea工具直接下载对应插件即可</li>
</ol>
<h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><p>类的生命周期可以粗略分为<code>5个阶段</code>：<mark class="hl-label default">加载</mark> 、<mark class="hl-label default">连接</mark> 、<mark class="hl-label default">初始化</mark> 、<mark class="hl-label default">使用</mark> 、<mark class="hl-label default">卸载</mark> 。</p>
<p>细致可以分为<code>7个阶段</code>：将五个阶段中的<mark class="hl-label default">连接</mark> 阶段，进行细分为三个阶段：<mark class="hl-label default">验证</mark> 、<mark class="hl-label default">准备</mark> 、<mark class="hl-label default">解析</mark> 。</p>
<p><img src="https://hexo.lcgui.cn/article/202407031459831.png" alt="image-20240703145933770"></p>
<h3 id="加载阶段"><a href="#加载阶段" class="headerlink" title="加载阶段"></a>加载阶段</h3><ol>
<li><p>加载(Loading)阶段第一步是类加载器根据类的全限定名通过不同的渠道以二进制流的方式获取字节码信息。 程序员可以使用Java代码拓展的不同的渠道。</p>
</li>
<li><p>类加载器在加载完类之后，Java虚拟机会将字节码中的信息保存到方法区中。生成一个InstanceKlass对象，保存类的所有信息，里边还包含实现特定功能比如多态的信息。</p>
</li>
<li><p>Java虚拟机还会在堆中生成一份与方法区中数据类似的java.lang.Class对象。 作用是在Java代码中去获取类的信息以及存储静态字段的数据（JDK8及之后）。</p>
<p><img src="C:\Users\LCG\AppData\Roaming\Typora\typora-user-images\image-20240703150158978.png" alt="image-20240703150158978"></p>
</li>
</ol>
<h3 id="连接阶段"><a href="#连接阶段" class="headerlink" title="连接阶段"></a>连接阶段</h3><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p><img src="https://hexo.lcgui.cn/article/202407031503242.png" alt="image-20240703150319207"></p>
<p>连接（Linking）阶段的第一个环节是验证，验证的主要目的是检测Java字节码文件是否遵守了《Java虚拟机规 范》中的约束。这个阶段一般不需要程序员参与。主要包含如下四部分：</p>
<ol>
<li><p>文件格式验证，比如文件是否以0xCAFEBABE开头，主次版本号是否满足当前Java虚拟机版本要求。</p>
</li>
<li><p>元信息验证，例如类必须有父类（super不能为空）。</p>
<p><img src="https://hexo.lcgui.cn/article/202407031504650.png" alt="image-20240703150452624"></p>
</li>
<li><p>验证程序执行指令的语义，比如方法内的指令执行中跳转到不正确的位置。</p>
</li>
<li><p>符号引用验证，例如是否访问了其他类中private的方法等。</p>
</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202407031506061.png" alt="image-20240703150633008"></p>
<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><span class='p red'>注意：本章涉及到的内存结构只讨论JDK8及之后的版本，8之前的版本后续章节详述。</span>

<ol>
<li><p>准备阶段为静态变量（static）分配内存并设置初始值。这个阶段只会分配初始值，并不会给赋值，赋值需要在初始化阶段才会操作</p>
<p><img src="https://hexo.lcgui.cn/article/202407031513458.png" alt="image-20240703151327411"></p>
</li>
</ol>
<p>以下是一些类型的初始值：</p>
<p><img src="https://hexo.lcgui.cn/article/202407031514613.png" alt="image-20240703151452567"></p>
<ol start="2">
<li><p>final修饰的基本数据类型的静态变量，准备阶段直接会将代码中的值进行赋值。</p>
<p><img src="https://hexo.lcgui.cn/article/202407031516375.png" alt="image-20240703151618334"></p>
</li>
</ol>
<h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><ol>
<li><p>解析阶段主要是将常量池中的符号引用替换为直接引用（符号引用就是在字节码文件中使用编号来访问常量池中的内容）。</p>
<p><img src="https://hexo.lcgui.cn/article/202407031517350.png" alt="image-20240703151747315"></p>
<p>直接引用不在使用编号，而是使用内存中地址进行访问具体的数据。</p>
</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202407031518490.png" alt="image-20240703151823456"></p>
<h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><ul>
<li><p>初始化阶段会执行静态代码块中的代码，并为静态变量赋值。</p>
</li>
<li><p>初始化阶段会执行字节码文件中clinit部分的字节码指令。</p>
<p><img src="https://hexo.lcgui.cn/article/202407031520373.png" alt="image-20240703152007328"></p>
<p>字节码指令的过程如下：</p>
<p><img src="https://hexo.lcgui.cn/article/202407031521284.png" alt="image-20240703152115240"></p>
</li>
<li><p>以下几种方式会导致类的初始化：</p>
<ol>
<li>访问一个类的静态变量或者静态方法，注意变量是final修饰的并且等号右边是常量不会触发初始化。 </li>
<li>调用Class.forName(String className)。 </li>
<li>new一个该类的对象时。 </li>
<li>执行Main方法的当前类。</li>
</ol>
</li>
<li><p>下面有几个测试题目</p>
<p>第一个：</p>
<p><img src="https://hexo.lcgui.cn/article/202407031625341.png" alt="image-20240703162511288"></p>
<p>第二个：</p>
<p><img src="https://hexo.lcgui.cn/article/202407031625699.png" alt="image-20240703162547642"></p>
</li>
<li><p>clinit指令在特定情况下不会出现，比如：如下几种情况是不会进行初始化指令执行的。</p>
<ol>
<li><p>无静态代码块且无静态变量赋值语句。 </p>
</li>
<li><p>有静态变量的声明，但是没有赋值语句。 </p>
</li>
<li><p>静态变量的定义使用final关键字，这类变量会在准备阶段直接进行初始化。</p>
<p><img src="https://hexo.lcgui.cn/article/202407031627348.png"></p>
</li>
</ol>
</li>
<li><p>直接访问父类的静态变量，不会触发子类的初始化。</p>
</li>
<li><p>子类的初始化clinit调用之前，会先调用父类的clinit初始化方法。</p>
<p>下面是例题：</p>
<p><img src="https://hexo.lcgui.cn/article/202407031629627.png" alt="image-20240703162905582"></p>
<p>把new B02()去掉：</p>
<p><img src="https://hexo.lcgui.cn/article/202407031629401.png" alt="image-20240703162943360"></p>
<p>另外两个关于初始化的练习题：</p>
<p>第一题：</p>
<p><img src="https://hexo.lcgui.cn/article/202407031635614.png" alt="image-20240703163501570"></p>
<p>第二题：</p>
<p><img src="https://hexo.lcgui.cn/article/202407031635617.png" alt="image-20240703163525574"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>自学之路</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Java跨Docker容器备份数据库数据</title>
    <url>/2024/05/25/Java%E8%B7%A8Docker%E5%AE%B9%E5%99%A8%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="Java跨Docker容器备份数据库数据"><a href="#Java跨Docker容器备份数据库数据" class="headerlink" title="Java跨Docker容器备份数据库数据"></a>Java跨Docker容器备份数据库数据</h2><h3 id="前置背景"><a href="#前置背景" class="headerlink" title="前置背景"></a>前置背景</h3><ul>
<li>在我们的开发部署场景中，通常多数使用Docker进行部署。当你的数据库和项目都使用Docker进行部署，此时我想要通过Java程序进行数据备份，那么就无法实现，因为是两个相互独立的容器。</li>
<li>在本篇文章中，我提供我的解决方法仅供参考。</li>
</ul>
<h3 id="思路整理"><a href="#思路整理" class="headerlink" title="思路整理"></a>思路整理</h3><ol>
<li>因为你的两个Docker容器是相互独立的，你的Java容器要操作MySQL，所以你的Java容器要具备可以执行MySQL命令的能力</li>
<li>但是，MySQL和Java是隔离的，无法直接使用MySQL命令备份，所以就想到使用docker的exec命令去操作MySQL容器让他备份。</li>
<li>备份完事以后，备份的文件还在MySQL容器中，宿主机也看不到想要的备份的SQL脚本，所以MySQL容器要挂载数据卷，把备份的SQL脚本备份出来。</li>
</ol>
<h3 id="编写备份脚本"><a href="#编写备份脚本" class="headerlink" title="编写备份脚本"></a>编写备份脚本</h3><p>本脚本我是从别人那里拿的，根据自己的需求修改即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">备份路径</span></span><br><span class="line">BACKUP=/backups/mysql</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当前时间</span></span><br><span class="line">DATETIME=$(date +%Y-%m-%d)</span><br><span class="line">echo &quot;===== 备份开始 =====&quot;</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">数据库名称</span></span><br><span class="line">DATABASE=你的数据库名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">数据库地址</span></span><br><span class="line">HOST=数据库地址</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">数据库用户名</span></span><br><span class="line">DB_USER=用户名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">数据库密码</span></span><br><span class="line">DB_PW=密码</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建备份目录</span></span><br><span class="line">[ ! -d &quot;$&#123;BACKUP&#125;/$DATABASE&quot; ] &amp;&amp; mkdir -p &quot;$&#123;BACKUP&#125;/$DATABASE&quot;</span><br><span class="line">echo &quot;备份文件存放于$&#123;BACKUP&#125;/$DATABASE/$DATABASE-$DATETIME.sql&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开始备份</span></span><br><span class="line">mysqldump -h $&#123;HOST&#125; -u$&#123;DB_USER&#125; -p$&#123;DB_PW&#125;  $&#123;DATABASE&#125; &gt; $&#123;BACKUP&#125;/$DATABASE/$DATABASE-$DATETIME.sql</span><br><span class="line"> </span><br><span class="line">echo &quot;===== 导出成功，开始传输 =====&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">压缩成tar.gz包</span></span><br><span class="line">cd $BACKUP</span><br><span class="line">tar -zcvf $DATABASE.tar.gz $DATABASE</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">备份到服务器B</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">scp <span class="variable">$DATABASE</span>-<span class="variable">$DATETIME</span>.sql root@ip:/home/mysqlBackup</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除备份目录  如果取消注释此命令 会删除sql脚本文件 只保留打包完成后的压缩包</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">rm</span> -rf <span class="variable">$&#123;BACKUP&#125;</span>/<span class="variable">$DATABASE</span>/<span class="variable">$DATETIME</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除10天（不含）前备份的数据，这边可以自行更改</span></span><br><span class="line">find $BACKUP -mtime +10 -name &quot;*.tar.gz&quot; -exec rm -rf &#123;&#125; \;</span><br><span class="line">echo &quot;===== 数据库备份到服务器成功 =====&quot;</span><br></pre></td></tr></table></figure>

<h3 id="容器启动"><a href="#容器启动" class="headerlink" title="容器启动"></a>容器启动</h3><p>这里如果你的容器已经启动了也没关系，直接跑一遍docker命令即可。</p>
<p><strong>Java：</strong></p>
<p>这里最主要的是数据卷的绑定，因为你的Java容器需要可以使用docker命令，所以你得把docker挂载进去。其他的根据自己的需求修改就行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-v $JOB_NAME-data:/tmp \</span><br><span class="line">--net=host \</span><br><span class="line">-e PARAMS=&quot;--spring.profiles.active=prod&quot; \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">-v /usr/bin/docker:/usr/bin/docker \</span><br><span class="line">--name $JOB_NAME $JOB_NAME</span><br></pre></td></tr></table></figure>

<p><strong>MySQL：</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql-conf:/etc/mysql/conf.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql-data:/var/lib/mysql</span></span><br><span class="line">      <span class="comment"># 数据库备份脚本存储路径，映射进去：这里是把你准备的备份脚本从宿主机映射到MySQL容器中，让他可以执行</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/export/shell/mysql:/home/shell/mysql</span></span><br><span class="line">      <span class="comment"># 数据库的备份文件挂在地址：这里是MySQL备份完成后，将备份文件从容器中映射到宿主机中</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/export/backups/mysql/57:/backups/mysql</span></span><br><span class="line">      <span class="comment"># 将宿主机的时区挂载到容器：不挂载可能导致容器内和宿主机的时间不一致，导致备份脚本文件名称的日期出错</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=自行设置你的数据库密码</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">mem_limit:</span> <span class="string">512m</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql-conf:</span></span><br><span class="line">  <span class="attr">mysql-data:</span></span><br></pre></td></tr></table></figure>

<h3 id="检验效果"><a href="#检验效果" class="headerlink" title="检验效果"></a>检验效果</h3><h4 id="Java容器"><a href="#Java容器" class="headerlink" title="Java容器"></a>Java容器</h4><ol>
<li>先进入到你的Java容器中：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it Java容器名 bash</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>进来以后可以直接使用下面的命令，查看是否挂载Docker成功：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>出现版本号即为成功</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202405271047547.png" alt="image-20240527104710429"></p>
<ol start="4">
<li>如果你出现了<code>权限不足</code>的问题，你需要退回到你的宿主机内，给<code>docker.sock</code>进行权限修改，没有的话直接省略此步骤即可：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod -R 777 /var/run/docker.sock</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>在<code>Java容器</code>中查看你的MySQL版本，如果正常出现版本号基本就没什么问题了：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意这里没有 -it 参数</span></span><br><span class="line">docker exec mysql mysql -V</span><br></pre></td></tr></table></figure>

<p><img src="https://hexo.lcgui.cn/article/202405271117041.png" alt="image-20240527111754983"></p>
<h4 id="MySQL容器"><a href="#MySQL容器" class="headerlink" title="MySQL容器"></a>MySQL容器</h4><ol>
<li>进入MySQL容器：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>找到你自己设置的挂载备份脚本的路径，查看脚本是否挂载成功：</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202405271125655.png" alt="image-20240527112516583"></p>
<ol start="3">
<li>你可以直接执行下你的脚本，看下效果</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh 你的脚本名称</span><br></pre></td></tr></table></figure>

<p><img src="https://hexo.lcgui.cn/article/202405271133632.png" alt="image-20240527113328530"></p>
<ol start="4">
<li>可以到你的备份目录查看下备份的效果，这里有其他的是因为我的程序设置的每七天自动备份一次：</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202405271135712.png" alt="image-20240527113507659"></p>
<ol start="5">
<li>到你的宿主机挂载的脚本备份路径查看：</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202405271138384.png" alt="image-20240527113846237"></p>
<p><img src="https://hexo.lcgui.cn/article/202405271139087.png" alt="image-20240527113918053"></p>
<ol start="6">
<li>这里还是有一个可能存在的坑：</li>
</ol>
<blockquote>
<p>如果你发现你备份的数据SQL脚本，分明是18号备份的但是SQL的脚本文件的名称上却是17号，这是因为：你的数据库备份脚本中，有一个参数是获取当前系统的时间，那么就说明你的MySQL容器中的时间跟宿主机的时间不一致，运行容器时没有对时区进行挂载数据卷。</p>
</blockquote>
<p><img src="https://hexo.lcgui.cn/article/202405271144494.png" alt="image-20240527114446397"></p>
<h3 id="Java代码执行备份"><a href="#Java代码执行备份" class="headerlink" title="Java代码执行备份"></a>Java代码执行备份</h3><p>代码执行这里我是使用了<code>xxl-job</code>定时任务去做，每七天备份一次，其他的实现方式可以根据你们自己的需求去进行更改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@XxlJob(&quot;mysqlBackup&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mysqlBackup</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//获取Runtime实例</span></span><br><span class="line">    <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">    <span class="comment">// 数据库备份命令</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="string">&quot;docker exec mysql sh /home/shell/mysql/course_compete.sh&quot;</span>;</span><br><span class="line">    <span class="comment">//获取命令所得的缓冲流结果</span></span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 执行命令</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Process</span> <span class="variable">exec</span> <span class="operator">=</span> runtime.exec(command);</span><br><span class="line">        <span class="comment">//初始化缓冲阅读器</span></span><br><span class="line">        bufferedReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(exec.getInputStream()));</span><br><span class="line">        <span class="comment">// 逐行读取输出</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="comment">//此时就可以对获取的结果in进行操作了，可以使用in.readline()逐步获取每一行的结果内容</span></span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;获取到的行数据：&#123;&#125;&quot;</span>, line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;竞赛模块数据库备份异常&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(bufferedReader != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bufferedReader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>运维</tag>
        <tag>必看</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud微服务之Docker篇</title>
    <url>/2024/04/25/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8BDocker%E7%AF%87/</url>
    <content><![CDATA[<h1 id="SpringCloud微服务之Docker篇"><a href="#SpringCloud微服务之Docker篇" class="headerlink" title="SpringCloud微服务之Docker篇"></a>SpringCloud微服务之Docker篇</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本片仅作使用手册查询时使用，想系统学习请移步<a href="https://www.bilibili.com/video/BV1LQ4y127n4?p=43&vd_source=e8f23ce779fe95d50e5e893a9b32eaa9">SpringCloud之Docker篇</a>。</p>
<h2 id="初识Docker"><a href="#初识Docker" class="headerlink" title="初识Docker"></a>初识Docker</h2><h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><p>微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦。</p>
<ul>
<li>分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。</li>
<li>在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题</li>
</ul>
<h3 id="应用部署的环境问题"><a href="#应用部署的环境问题" class="headerlink" title="应用部署的环境问题"></a>应用部署的环境问题</h3><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p>
<ul>
<li><p>依赖关系复杂，容易出现兼容性问题</p>
</li>
<li><p>开发、测试、生产环境有差异</p>
</li>
</ul>
<p><img src="https://hexo.lcgui.cn/article/202404251624037.png" alt="image-20210731141907366"></p>
<p>例如一个项目中，部署时需要依赖于node.js、Redis、RabbitMQ、MySQL等，这些服务部署时所需要的函数库、依赖项各不相同，甚至会有冲突。给部署带来了极大的困难。</p>
<h3 id="Docker解决依赖兼容问题"><a href="#Docker解决依赖兼容问题" class="headerlink" title="Docker解决依赖兼容问题"></a>Docker解决依赖兼容问题</h3><p>而Docker确巧妙的解决了这些问题，Docker是如何实现的呢？</p>
<p>Docker为了解决依赖的兼容问题的，采用了两个手段：</p>
<ul>
<li><p>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</p>
</li>
<li><p>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰</p>
</li>
</ul>
<p><img src="https://hexo.lcgui.cn/article/202404251624177.png" alt="image-20210731142219735"></p>
<p>这样打包好的应用包中，既包含应用本身，也保护应用所需要的Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。</p>
<p>虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？</p>
<h3 id="Docker解决操作系统环境差异"><a href="#Docker解决操作系统环境差异" class="headerlink" title="Docker解决操作系统环境差异"></a>Docker解决操作系统环境差异</h3><p>要解决不同操作系统环境差异问题，必须先了解操作系统结构。以一个Ubuntu操作系统为例，结构如下：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624310.png" alt="image-20210731143401460"></p>
<p>结构包括：</p>
<ul>
<li>计算机硬件：例如CPU、内存、磁盘等</li>
<li>系统内核：所有Linux发行版的内核都是Linux，例如CentOS、Ubuntu、Fedora等。内核可以与计算机硬件交互，对外提供<strong>内核指令</strong>，用于操作计算机硬件。</li>
<li>系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。</li>
</ul>
<p>应用于计算机交互的流程如下：</p>
<p>1）应用调用操作系统应用（函数库），实现各种功能</p>
<p>2）系统函数库是对内核指令集的封装，会调用内核指令</p>
<p>3）内核指令操作计算机硬件</p>
<p>Ubuntu和CentOSpringBoot都是基于Linux内核，无非是系统应用不同，提供的函数库有差异：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624405.png" alt="image-20210731144304990"></p>
<p>此时，如果将一个Ubuntu版本的MySQL应用安装到CentOS系统，MySQL在调用Ubuntu函数库时，会发现找不到或者不匹配，就会报错了：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624513.png" alt="image-20210731144458680"></p>
<p>Docker如何解决不同系统环境的问题？</p>
<ul>
<li>Docker将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包</li>
<li>Docker运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的Linux内核来运行</li>
</ul>
<p>如图：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624753.png" alt="image-20210731144820638"></p>
<h2 id="Docker和虚拟机的区别"><a href="#Docker和虚拟机的区别" class="headerlink" title="Docker和虚拟机的区别"></a>Docker和虚拟机的区别</h2><p>Docker可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。</p>
<p>两者有什么差异呢？</p>
<p><strong>虚拟机</strong>（virtual machine）是在操作系统中<strong>模拟</strong>硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。</p>
<p><strong>Docker</strong>仅仅是封装函数库，并没有模拟完整的操作系统，如图：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624841.png" alt="image-20210731145914960"></p>
<p>对比来看：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624899.png" alt="image-20210731152243765"></p>
<p>小结：</p>
<p>Docker和虚拟机的差异：</p>
<ul>
<li><p>docker是一个系统进程；虚拟机是在操作系统中的操作系统</p>
</li>
<li><p>docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</p>
</li>
</ul>
<h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><h3 id="镜像和容器"><a href="#镜像和容器" class="headerlink" title="镜像和容器"></a>镜像和容器</h3><p>Docker中有几个重要的概念：</p>
<p><strong>镜像（Image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。</p>
<p><strong>容器（Container）</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见。</p>
<p>一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的<strong>文件</strong>。只有运行时，才会加载到内存，形成进程。</p>
<p>而<strong>镜像</strong>，就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。</p>
<p><strong>容器</strong>呢，就是将这些文件中编写的程序、函数加载到内存中允许，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624630.png" alt="image-20210731153059464"></p>
<p>例如你下载了一个QQ，如果我们将QQ在磁盘上的运行<strong>文件</strong>及其运行的操作系统依赖打包，形成QQ镜像。然后你可以启动多次，双开、甚至三开QQ，跟多个妹子聊天。</p>
<h3 id="DockerHub"><a href="#DockerHub" class="headerlink" title="DockerHub"></a>DockerHub</h3><p>开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如Redis、MySQL镜像放到网络上，共享使用，就像GitHub的代码共享一样。</p>
<ul>
<li><p>DockerHub：DockerHub是一个官方的Docker镜像的托管平台。这样的平台称为Docker Registry。</p>
</li>
<li><p>国内也有类似于DockerHub 的公开服务，比如 <a href="https://c.163yun.com/hub">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/">阿里云镜像库</a>等。</p>
</li>
</ul>
<p>我们一方面可以将自己的镜像共享到DockerHub，另一方面也可以从DockerHub拉取镜像：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624014.png" alt="image-20210731153743354"></p>
<h3 id="Docker架构-1"><a href="#Docker架构-1" class="headerlink" title="Docker架构"></a>Docker架构</h3><p>我们要使用Docker来操作镜像、容器，就必须要安装Docker。</p>
<p>Docker是一个CS架构的程序，由两部分组成：</p>
<ul>
<li><p>服务端(server)：Docker守护进程，负责处理Docker指令，管理镜像、容器等</p>
</li>
<li><p>客户端(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</p>
</li>
</ul>
<p>如图：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624263.png" alt="image-20210731154257653"></p>
<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>关于Docker的安装这里我就不写了，自行百度安装即可。</p>
<h1 id="Docker的基本操作"><a href="#Docker的基本操作" class="headerlink" title="Docker的基本操作"></a>Docker的基本操作</h1><h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><h3 id="镜像名称"><a href="#镜像名称" class="headerlink" title="镜像名称"></a>镜像名称</h3><p>首先来看下镜像的名称组成：</p>
<ul>
<li>镜名称一般分两部分组成：[repository]:[tag]。</li>
<li>在没有指定tag时，默认是latest，代表最新版本的镜像</li>
</ul>
<p>如图：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624095.png" alt="image-20210731155141362"></p>
<p>这里的mysql就是repository，5.7就是tag，合一起就是镜像名称，代表5.7版本的MySQL镜像。</p>
<h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><p>常见的镜像操作命令如图：</p>
<p><img src="https://hexo.lcgui.cn/article/202405081104996.png" alt="image-20210731155649535"></p>
<h3 id="案例1-拉取、查看镜像"><a href="#案例1-拉取、查看镜像" class="headerlink" title="案例1-拉取、查看镜像"></a>案例1-拉取、查看镜像</h3><p>需求：从DockerHub中拉取一个nginx镜像并查看</p>
<p>1）首先去镜像仓库搜索nginx镜像，比如<a href="https://hub.docker.com/">DockerHub</a>:</p>
<p><img src="https://hexo.lcgui.cn/article/202405081104654.png" alt="image-20210731155844368"></p>
<p>2）根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624127.png" alt="image-20210731155856199"></p>
<p>3）通过命令：docker images 查看拉取到的镜像</p>
<p><img src="https://hexo.lcgui.cn/article/202405081128368.png" alt="image-20210731155903037"></p>
<h3 id="案例2-保存、导入镜像"><a href="#案例2-保存、导入镜像" class="headerlink" title="案例2-保存、导入镜像"></a>案例2-保存、导入镜像</h3><p>需求：利用docker save将nginx镜像导出磁盘，然后再通过load加载回来</p>
<p>1）利用docker xx –help命令查看docker save和docker load的语法</p>
<p>例如，查看save命令用法，可以输入命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker save --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://hexo.lcgui.cn/article/202405081104530.png" alt="image-20210731161104732"></p>
<p>命令格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker save -o [保存的目标文件名称] [镜像名称]</span><br></pre></td></tr></table></figure>

<p>2）使用docker save导出镜像到磁盘 </p>
<p>运行命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker save -o nginx.tar nginx:latest</span><br></pre></td></tr></table></figure>

<p>结果如图：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624959.png" alt="image-20210731161354344"></p>
<p>3）使用docker load加载镜像</p>
<p>先删除本地的nginx镜像：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker rmi nginx:latest</span><br></pre></td></tr></table></figure>

<p>然后运行命令，加载本地文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker load -i nginx.tar</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624976.png" alt="image-20210731161746245"></p>
<h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><h3 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h3><p>容器操作的命令如图：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624969.png" alt="image-20210731161950495"></p>
<p>容器保护三个状态：</p>
<ul>
<li>运行：进程正常运行</li>
<li>暂停：进程暂停，CPU不再运行，并不释放内存</li>
<li>停止：进程终止，回收进程占用的内存、CPU等资源</li>
</ul>
<p>其中：</p>
<ul>
<li><p>docker run：创建并运行一个容器，处于运行状态</p>
</li>
<li><p>docker pause：让一个运行的容器暂停</p>
</li>
<li><p>docker unpause：让一个容器从暂停状态恢复运行</p>
</li>
<li><p>docker stop：停止一个运行的容器</p>
</li>
<li><p>docker start：让一个停止的容器再次运行</p>
</li>
<li><p>docker rm：删除一个容器</p>
</li>
</ul>
<h3 id="案例-创建并运行一个容器"><a href="#案例-创建并运行一个容器" class="headerlink" title="案例-创建并运行一个容器"></a>案例-创建并运行一个容器</h3><p>创建并运行nginx容器的命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name containerName -p 80:80 -d nginx</span><br></pre></td></tr></table></figure>

<p>命令解读：</p>
<ul>
<li>docker run ：创建并运行一个容器</li>
<li>–name : 给容器起一个名字，比如叫做mn</li>
<li>-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li>
<li>-d：后台运行容器</li>
<li>nginx：镜像名称，例如nginx</li>
</ul>
<p>这里的<code>-p</code>参数，是将容器端口映射到宿主机端口。</p>
<p>默认情况下，容器是隔离环境，我们直接访问宿主机的80端口，肯定访问不到容器中的nginx。</p>
<p>现在，将容器的80与宿主机的80关联起来，当我们访问宿主机的80端口时，就会被映射到容器的80，这样就能访问到nginx了：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624973.png" alt="image-20210731163255863"></p>
<h3 id="案例-进入容器，修改文件"><a href="#案例-进入容器，修改文件" class="headerlink" title="案例-进入容器，修改文件"></a>案例-进入容器，修改文件</h3><p><strong>需求</strong>：进入Nginx容器，修改HTML文件内容，添加“传智教育欢迎您”</p>
<p><strong>提示</strong>：进入容器要用到docker exec命令。</p>
<p><strong>步骤</strong>：</p>
<p>1）进入容器。进入我们刚刚创建的nginx容器的命令为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mn bash</span><br></pre></td></tr></table></figure>

<p>命令解读：</p>
<ul>
<li><p>docker exec ：进入容器内部，执行一个命令</p>
</li>
<li><p>-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</p>
</li>
<li><p>mn ：要进入的容器的名称</p>
</li>
<li><p>bash：进入容器后执行的命令，bash是一个linux终端交互命令</p>
</li>
</ul>
<p>2）进入nginx的HTML所在目录 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p>
<p>容器内部会模拟一个独立的Linux文件系统，看起来如同一个linux服务器一样：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624116.png" alt="image-20210731164159811"></p>
<p>nginx的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的html文件。</p>
<p>查看DockerHub网站中的nginx页面，可以知道nginx的html目录位置在<code>/usr/share/nginx/html</code></p>
<p>我们执行命令，进入该目录：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html</span><br></pre></td></tr></table></figure>

<p> 查看目录下文件：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624201.png" alt="image-20210731164455818"></p>
<p>3）修改index.html的内容</p>
<p>容器内没有vi命令，无法直接修改，我们用下面的命令来修改：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -i -e <span class="string">&#x27;s#Welcome to nginx#自定义修改的文字#g&#x27;</span> -e <span class="string">&#x27;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#x27;</span> index.html</span><br></pre></td></tr></table></figure>



<p>在浏览器访问自己的虚拟机地址，例如我的是：<a href="http://192.168.150.101,即可看到结果./">http://192.168.150.101，即可看到结果。</a></p>
<h2 id="数据卷（容器数据管理）"><a href="#数据卷（容器数据管理）" class="headerlink" title="数据卷（容器数据管理）"></a>数据卷（容器数据管理）</h2><p>在之前的nginx案例中，修改nginx的html页面时，需要进入nginx内部。并且因为没有编辑器，修改文件也很麻烦。</p>
<p>这就是因为容器与数据（容器内文件）耦合带来的后果。</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624649.png" alt="image-20210731172440275"></p>
<p>要解决这个问题，必须将数据与容器解耦，这就要用到数据卷了。</p>
<h3 id="什么是数据卷"><a href="#什么是数据卷" class="headerlink" title="什么是数据卷"></a>什么是数据卷</h3><p><strong>数据卷（volume）</strong>是一个虚拟目录，指向宿主机文件系统中的某个目录。</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624396.png" alt="image-20210731173541846"></p>
<p>一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。</p>
<p>这样，我们操作宿主机的&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;html目录，就等于操作容器内的&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html目录了</p>
<h3 id="数据集操作命令"><a href="#数据集操作命令" class="headerlink" title="数据集操作命令"></a>数据集操作命令</h3><p>数据卷操作的基本语法如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume [COMMAND]</span><br></pre></td></tr></table></figure>

<p>docker volume命令是数据卷操作，根据命令后跟随的command来确定下一步的操作：</p>
<ul>
<li>create 创建一个volume</li>
<li>inspect 显示一个或多个volume的信息</li>
<li>ls 列出所有的volume</li>
<li>prune 删除未使用的volume</li>
<li>rm 删除一个或多个指定的volume</li>
</ul>
<h3 id="创建和查看数据卷"><a href="#创建和查看数据卷" class="headerlink" title="创建和查看数据卷"></a>创建和查看数据卷</h3><p><strong>需求</strong>：创建一个数据卷，并查看数据卷在宿主机的目录位置</p>
<p>① 创建数据卷</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume create html</span><br></pre></td></tr></table></figure>



<p>② 查看所有数据</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624446.png" alt="image-20210731173746910"></p>
<p>③ 查看数据卷详细信息卷</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume inspect html</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624498.png" alt="image-20210731173809877"></p>
<p>可以看到，我们创建的html这个数据卷关联的宿主机目录为<code>/var/lib/docker/volumes/html/_data</code>目录。</p>
<p><strong>小结</strong>：</p>
<p>数据卷的作用：</p>
<ul>
<li>将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</li>
</ul>
<p>数据卷操作：</p>
<ul>
<li>docker volume create：创建数据卷</li>
<li>docker volume ls：查看所有数据卷</li>
<li>docker volume inspect：查看数据卷详细信息，包括关联的宿主机目录位置</li>
<li>docker volume rm：删除指定数据卷</li>
<li>docker volume prune：删除所有未使用的数据卷</li>
</ul>
<h3 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷"></a>挂载数据卷</h3><p>我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --name mn \</span><br><span class="line">  -v html:/root/html \</span><br><span class="line">  -p 8080:80</span><br><span class="line">  nginx \</span><br></pre></td></tr></table></figure>

<p>这里的-v就是挂载数据卷的命令：</p>
<ul>
<li><code>-v html:/root/htm</code> ：把html数据卷挂载到容器内的&#x2F;root&#x2F;html这个目录中</li>
</ul>
<h3 id="案例-给nginx挂载数据卷"><a href="#案例-给nginx挂载数据卷" class="headerlink" title="案例-给nginx挂载数据卷"></a>案例-给nginx挂载数据卷</h3><p><strong>需求</strong>：创建一个nginx容器，修改容器内的html目录内的index.html内容</p>
<p><strong>分析</strong>：上个案例中，我们进入nginx容器内部，已经知道nginx的html目录所在位置&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html ，我们需要把这个目录挂载到html这个数据卷上，方便操作其中的内容。</p>
<p><strong>提示</strong>：运行容器时使用 -v 参数挂载数据卷</p>
<p>步骤：</p>
<p>① 创建容器并挂载数据卷到容器内的HTML目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name mn -v html:/usr/share/nginx/html -p 80:80 -d nginx</span><br></pre></td></tr></table></figure>



<p>② 进入html数据卷所在位置，并修改HTML内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看html数据卷的位置</span></span><br><span class="line">docker volume inspect html</span><br><span class="line"><span class="comment"># 进入该目录</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/docker/volumes/html/_data</span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line">vi index.html</span><br></pre></td></tr></table></figure>



<h3 id="案例-给MySQL挂载本地目录"><a href="#案例-给MySQL挂载本地目录" class="headerlink" title="案例-给MySQL挂载本地目录"></a>案例-给MySQL挂载本地目录</h3><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：</p>
<ul>
<li>带数据卷模式：宿主机目录 –&gt; 数据卷 —&gt; 容器内目录</li>
<li>直接挂载模式：宿主机目录 —&gt; 容器内目录</li>
</ul>
<p>如图：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624550.png" alt="image-20210731175155453"></p>
<p><strong>语法</strong>：</p>
<p>目录挂载与数据卷挂载的语法是类似的：</p>
<ul>
<li>-v [宿主机目录]:[容器内目录]</li>
<li>-v [宿主机文件]:[容器内文件]</li>
</ul>
<p><strong>需求</strong>：创建并运行一个MySQL容器，将宿主机目录直接挂载到容器</p>
<p>实现思路如下：</p>
<p>1）在将课前资料中的mysql.tar文件上传到虚拟机，通过load命令加载为镜像</p>
<p>2）创建目录&#x2F;tmp&#x2F;mysql&#x2F;data</p>
<p>3）创建目录&#x2F;tmp&#x2F;mysql&#x2F;conf，将课前资料提供的hmy.cnf文件上传到&#x2F;tmp&#x2F;mysql&#x2F;conf</p>
<p>4）去DockerHub查阅资料，创建并运行MySQL容器，要求：</p>
<p>① 挂载&#x2F;tmp&#x2F;mysql&#x2F;data到mysql容器内数据存储目录</p>
<p>② 挂载&#x2F;tmp&#x2F;mysql&#x2F;conf&#x2F;hmy.cnf到mysql容器的配置文件</p>
<p>③ 设置MySQL密码</p>
<h1 id="Dockerfile自定义镜像"><a href="#Dockerfile自定义镜像" class="headerlink" title="Dockerfile自定义镜像"></a>Dockerfile自定义镜像</h1><p>常见的镜像在DockerHub就能找到，但是我们自己写的项目就必须自己构建镜像了。</p>
<p>而要自定义镜像，就必须先了解镜像的结构才行。</p>
<h2 id="镜像结构"><a href="#镜像结构" class="headerlink" title="镜像结构"></a>镜像结构</h2><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p>
<p>我们以MySQL为例，来看看镜像的组成结构：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624600.png" alt="image-20210731175806273"></p>
<p>简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p>
<p>我们要构建镜像，其实就是实现上述打包的过程。</p>
<h2 id="Dockerfile语法"><a href="#Dockerfile语法" class="headerlink" title="Dockerfile语法"></a>Dockerfile语法</h2><p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。</p>
<p>我们只需要告诉Docker，我们的镜像的组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像。</p>
<p>而描述上述信息的文件就是Dockerfile文件。</p>
<p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的**指令(Instruction)**，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624671.png" alt="image-20210731180321133"></p>
<p>更新详细语法说明，请参考官网文档： <a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p>
<h2 id="构建Java项目"><a href="#构建Java项目" class="headerlink" title="构建Java项目"></a>构建Java项目</h2><h3 id="基于Ubuntu构建Java项目"><a href="#基于Ubuntu构建Java项目" class="headerlink" title="基于Ubuntu构建Java项目"></a>基于Ubuntu构建Java项目</h3><p>需求：基于Ubuntu镜像构建一个新镜像，运行一个java项目</p>
<ul>
<li><p>步骤1：新建一个空文件夹docker-demo</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624812.png" alt="image-20210801101207444"></p>
</li>
<li><p>步骤2：拷贝课前资料中的docker-demo.jar文件到docker-demo这个目录</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624862.png" alt="image-20210801101314816"></p>
</li>
<li><p>步骤3：拷贝课前资料中的jdk8.tar.gz文件到docker-demo这个目录</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624972.png" alt="image-20210801101410200"></p>
</li>
<li><p>步骤4：拷贝课前资料提供的Dockerfile到docker-demo这个目录</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624237.png" alt="image-20210801101455590"></p>
<p>其中的内容如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_DIR=/usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝jdk和java项目的包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; <span class="built_in">mv</span> ./jdk1.8.0_144 ./java8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>步骤5：进入docker-demo</p>
<p>将准备好的docker-demo上传到虚拟机任意目录，然后进入docker-demo目录下</p>
</li>
<li><p>步骤6：运行命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t javaweb:1.0 .</span><br></pre></td></tr></table></figure></li>
</ul>
<p>最后访问 <a href="http://192.168.150.101:8090/hello/count%EF%BC%8C%E5%85%B6%E4%B8%AD%E7%9A%84ip%E6%94%B9%E6%88%90%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BAip">http://192.168.150.101:8090/hello/count，其中的ip改成你的虚拟机ip</a></p>
<h3 id="基于java8构建Java项目"><a href="#基于java8构建Java项目" class="headerlink" title="基于java8构建Java项目"></a>基于java8构建Java项目</h3><p>虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。</p>
<p>例如，构建java项目的镜像，可以在已经准备了JDK的基础镜像基础上构建。</p>
<p>需求：基于java:8-alpine镜像，将一个Java项目构建为镜像</p>
<p>实现思路如下：</p>
<ul>
<li><p>① 新建一个空的目录，然后在目录中新建一个文件，命名为Dockerfile</p>
</li>
<li><p>② 拷贝课前资料提供的docker-demo.jar到这个目录中</p>
</li>
<li><p>③ 编写Dockerfile文件：</p>
<ul>
<li><p>a ）基于java:8-alpine作为基础镜像</p>
</li>
<li><p>b ）将app.jar拷贝到镜像中</p>
</li>
<li><p>c ）暴露端口</p>
</li>
<li><p>d ）编写入口ENTRYPOINT</p>
<p>内容如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./app.jar /tmp/app.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>④ 使用docker build命令构建镜像</p>
</li>
<li><p>⑤ 使用docker run创建容器并运行</p>
</li>
</ul>
<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h1><p>Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624274.png" alt="image-20210731180921742"></p>
<h2 id="初识DockerCompose"><a href="#初识DockerCompose" class="headerlink" title="初识DockerCompose"></a>初识DockerCompose</h2><p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">version<span class="punctuation">:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"> services<span class="punctuation">:</span></span><br><span class="line">  mysql<span class="punctuation">:</span></span><br><span class="line">    image<span class="punctuation">:</span> mysql<span class="punctuation">:</span><span class="number">5.7</span><span class="number">.25</span></span><br><span class="line">    environment<span class="punctuation">:</span></span><br><span class="line">     MYSQL_ROOT_PASSWORD<span class="punctuation">:</span> <span class="number">123</span> </span><br><span class="line">    volumes<span class="punctuation">:</span></span><br><span class="line">     - <span class="string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">     - <span class="string">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span></span><br><span class="line">  web<span class="punctuation">:</span></span><br><span class="line">    build<span class="punctuation">:</span> .</span><br><span class="line">    ports<span class="punctuation">:</span></span><br><span class="line">     - <span class="string">&quot;8090:8090&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的Compose文件就描述一个项目，其中包含两个容器：</p>
<ul>
<li>mysql：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个目录</li>
<li>web：一个基于<code>docker build</code>临时构建的镜像容器，映射端口时8090</li>
</ul>
<p>DockerCompose的详细语法参考官网：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p>
<p>其实DockerCompose文件可以看做是将多个docker run命令写到一个文件，只是语法稍有差异。</p>
<h2 id="安装DockerCompose"><a href="#安装DockerCompose" class="headerlink" title="安装DockerCompose"></a>安装DockerCompose</h2><p>参考课前资料</p>
<h2 id="部署微服务集群"><a href="#部署微服务集群" class="headerlink" title="部署微服务集群"></a>部署微服务集群</h2><p><strong>需求</strong>：将之前学习的cloud-demo微服务集群利用DockerCompose部署</p>
<p><strong>实现思路</strong>：</p>
<p>① 查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件</p>
<p>② 修改自己的cloud-demo项目，将数据库、nacos地址都命名为docker-compose中的服务名</p>
<p>③ 使用maven打包工具，将项目中的每个微服务都打包为app.jar</p>
<p>④ 将打包好的app.jar拷贝到cloud-demo中的每一个对应的子目录中</p>
<p>⑤ 将cloud-demo上传至虚拟机，利用 docker-compose up -d 来部署</p>
<h3 id="compose文件"><a href="#compose文件" class="headerlink" title="compose文件"></a>compose文件</h3><p>查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件，而且每个微服务都准备了一个独立的目录：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624319.png" alt="image-20210731181341330"></p>
<p>内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MODE:</span> <span class="string">standalone</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8848:8848&quot;</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7.25</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/conf:/etc/mysql/conf.d/&quot;</span></span><br><span class="line">  <span class="attr">userservice:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./user-service</span></span><br><span class="line">  <span class="attr">orderservice:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./order-service</span></span><br><span class="line">  <span class="attr">gateway:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./gateway</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;10010:10010&quot;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，其中包含5个service服务：</p>
<ul>
<li><code>nacos</code>：作为注册中心和配置中心<ul>
<li><code>image: nacos/nacos-server</code>： 基于nacos&#x2F;nacos-server镜像构建</li>
<li><code>environment</code>：环境变量<ul>
<li><code>MODE: standalone</code>：单点模式启动</li>
</ul>
</li>
<li><code>ports</code>：端口映射，这里暴露了8848端口</li>
</ul>
</li>
<li><code>mysql</code>：数据库<ul>
<li><code>image: mysql:5.7.25</code>：镜像版本是mysql:5.7.25</li>
<li><code>environment</code>：环境变量<ul>
<li><code>MYSQL_ROOT_PASSWORD: 123</code>：设置数据库root账户的密码为123</li>
</ul>
</li>
<li><code>volumes</code>：数据卷挂载，这里挂载了mysql的data、conf目录，其中有我提前准备好的数据</li>
</ul>
</li>
<li><code>userservice</code>、<code>orderservice</code>、<code>gateway</code>：都是基于Dockerfile临时构建的</li>
</ul>
<p>查看mysql目录，可以看到其中已经准备好了cloud_order、cloud_user表：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624467.png" alt="image-20210801095205034"></p>
<p>查看微服务目录，可以看到都包含Dockerfile文件：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624497.png" alt="image-20210801095320586"></p>
<p>内容如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./app.jar /tmp/app.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure>

<h3 id="修改微服务配置"><a href="#修改微服务配置" class="headerlink" title="修改微服务配置"></a>修改微服务配置</h3><p>因为微服务将来要部署为docker容器，而容器之间互联不是通过IP地址，而是通过容器名。这里我们将order-service、user-service、gateway服务的mysql、nacos地址都修改为基于容器名的访问。</p>
<p>如下所示：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://mysql:3306/cloud_order?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">nacos:8848</span> <span class="comment"># nacos服务地址</span></span><br></pre></td></tr></table></figure>



<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>接下来需要将我们的每个微服务都打包。因为之前查看到Dockerfile中的jar包名称都是app.jar，因此我们的每个微服务都需要用这个名称。</p>
<p>可以通过修改pom.xml中的打包名称来实现，每个微服务都需要修改：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 服务打包的最终名称 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>app<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打包后：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624533.png" alt="image-20210801095951030"></p>
<h3 id="拷贝jar包到部署目录"><a href="#拷贝jar包到部署目录" class="headerlink" title="拷贝jar包到部署目录"></a>拷贝jar包到部署目录</h3><p>编译打包好的app.jar文件，需要放到Dockerfile的同级目录中。注意：每个微服务的app.jar放到与服务名称对应的目录，别搞错了。</p>
<p>user-service：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624570.png" alt="image-20210801100201253"></p>
<p>order-service：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624669.png" alt="image-20210801100231495"></p>
<p>gateway：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624822.png" alt="image-20210801100308102"></p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>最后，我们需要将文件整个cloud-demo文件夹上传到虚拟机中，理由DockerCompose部署。</p>
<p>上传到任意目录：</p>
<p><img src="https://hexo.lcgui.cn/article/202404251624982.png" alt="image-20210801100955653"></p>
<p>部署：</p>
<p>进入cloud-demo目录，然后运行下面的命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>







<h1 id="Docker镜像仓库"><a href="#Docker镜像仓库" class="headerlink" title="Docker镜像仓库"></a>Docker镜像仓库</h1><h2 id="搭建私有镜像仓库"><a href="#搭建私有镜像仓库" class="headerlink" title="搭建私有镜像仓库"></a>搭建私有镜像仓库</h2><p>这里也不做过多介绍，可以了解文章开头介绍的链接去视频中了解，亦或自行百度。</p>
<h2 id="推送、拉取镜像"><a href="#推送、拉取镜像" class="headerlink" title="推送、拉取镜像"></a>推送、拉取镜像</h2><p>推送镜像到私有镜像服务必须先tag，步骤如下：</p>
<p>① 重新tag本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080&#x2F;</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker tag nginx:latest 192.168.150.101:8080/nginx:1.0 </span><br></pre></td></tr></table></figure>



<p>② 推送镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker push 192.168.150.101:8080/nginx:1.0 </span><br></pre></td></tr></table></figure>



<p>③ 拉取镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull 192.168.150.101:8080/nginx:1.0 </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>自学之路</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>自学</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>【解决】SQL中包含问号，导致Mybatis解析错误</title>
    <url>/2024/08/30/%E3%80%90%E8%A7%A3%E5%86%B3%E3%80%91sql%E4%B8%AD%E5%8C%85%E5%90%AB%E9%97%AE%E5%8F%B7%EF%BC%8C%E5%AF%BC%E8%87%B4mybatis%E8%A7%A3%E6%9E%90%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h1 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h1><p>今天在使用 <strong>mybatis</strong> 处理动态 sql （PostgreSQL 数据库）的时候遇到了一个问题：<br>sql语句中本身包含 <code>?</code> 的时候 <strong>mybatis</strong> 解析参数会把 sql语句中的 <code>?</code>当作<strong>占位符</strong> 给解析成变量 导致sql查询失败<br><strong>案例如下：</strong><br>我这里存储的是<code>jsonb类型</code>数据 大概如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;str&quot;</span><span class="punctuation">:</span> <span class="string">&quot;param&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;arr&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;param1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;param2&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>我的需求是</strong>：想要获取<code>json列</code>的数据中数组<code>arr</code>中包含<code>param1</code>的数据 得到的sql如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> your_table</span><br><span class="line"><span class="keyword">WHERE</span> tags<span class="operator">-</span><span class="operator">&gt;</span><span class="string">&#x27;arr&#x27;</span> ?<span class="operator">|</span> <span class="keyword">ARRAY</span>[<span class="string">&#x27;paam1&#x27;</span>];</span><br></pre></td></tr></table></figure>
<p>这个sql在我们的sql连接器中执行是完全没问题的，但是在mybatis中使用这个sql的时候<code>?|</code>中的<code>?</code>会被mybatis当作占位符 替换成参数<br>例子如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里是mapper接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">testMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUser</span><span class="params">(<span class="meta">@Param(&quot;sysId&quot;)</span> String sysId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里是xml文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        SELECT *</span><br><span class="line">        FROM user</span><br><span class="line">        WHERE tags -&gt; &#x27;arr&#x27; ?| ARRAY[#&#123;sysId&#125;]</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>假如我传入的<code>sysId</code>是<code>aaa</code>那么最后我们查询出来的sql就会变成：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> tags <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;arr&#x27;</span> <span class="string">&#x27;aaa&#x27;</span><span class="operator">|</span> <span class="keyword">ARRAY</span>[?] </span><br></pre></td></tr></table></figure>
<p>同时代码报错：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.springframework.dao.DataIntegrityViolationException: </span><br><span class="line">### Error querying database.  Cause: org.postgresql.util.PSQLException: 未设定参数值 <span class="number">2</span> 的内容。</span><br><span class="line">### The error may exist in file [D:\ffcs-progect\back\gops-timing-calculation\target\classes\mybatis\AnalyNetElementMapper.xml]</span><br><span class="line">### The error may involve com.ffcs.iod.app.modules.analy.mapper.NetElementMapper.test-Inline</span><br><span class="line">### The error occurred <span class="keyword">while</span> setting parameters</span><br><span class="line">### SQL: SELECT *         FROM user         WHERE tags -&gt; <span class="string">&#x27;arr&#x27;</span> ?| ARRAY[?]</span><br><span class="line">### Cause: org.postgresql.util.PSQLException: 未设定参数值 <span class="number">2</span> 的内容。</span><br><span class="line">; 未设定参数值 <span class="number">2</span> 的内容。; nested exception is org.postgresql.util.PSQLException: 未设定参数值 <span class="number">2</span> 的内容。</span><br></pre></td></tr></table></figure>
<p>由上可以看到<code>?|</code>运算符的<code>?</code>被替换了 而不是 我们参数 ，参数的位置还是空的。下面给出两种我测试都可以的方案，但是个人比较推荐第二种方案。</p>
<h1 id="解决方案一"><a href="#解决方案一" class="headerlink" title="解决方案一"></a>解决方案一</h1><p>将<code>?|</code> 写成<code>??|</code>也就是在问号的前面多加一个问号，这样就能解决了。<br>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        SELECT *</span><br><span class="line">        FROM user</span><br><span class="line">        WHERE tags -&gt; &#x27;arr&#x27; ??| ARRAY[#&#123;sysId&#125;]</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这种方法<strong>虽然</strong>在解析的时候还是会显示如下sql：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> tags <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;arr&#x27;</span> <span class="string">&#x27;aaa&#x27;</span>?<span class="operator">|</span> <span class="keyword">ARRAY</span>[?] </span><br></pre></td></tr></table></figure>
<p><strong>但是代码是没有报错的，同时也可以查询出来数据。</strong></p>
<h1 id="解决方案二"><a href="#解决方案二" class="headerlink" title="解决方案二"></a>解决方案二</h1><p>使用pg数据库内置函数<code>jsonb_exists_any()</code>，这个方法比较<code>推荐</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        SELECT *</span><br><span class="line">        FROM user</span><br><span class="line">        WHERE jsonb_exists_any(tags -&gt; &#x27;arr&#x27;, ARRAY[#&#123;sysId&#125;])</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>bug</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Docker部署Jenkins</title>
    <url>/2024/05/08/%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Jenkins/</url>
    <content><![CDATA[<h1 id="使用Docker部署Jenkins"><a href="#使用Docker部署Jenkins" class="headerlink" title="使用Docker部署Jenkins"></a>使用Docker部署Jenkins</h1><h3 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h3><p>在本篇文章中需要用到的软件支持如下：</p>
<ul>
<li><strong>Docker</strong>：标题上有说使用Docker部署，所以Docker必然不可缺少，没有了解的话，可以看下博客中的Docker那篇文章，你的服务器上没有安装Docker的话是无法进行安装Jenkins操作的。</li>
<li><strong>Maven</strong>：这个是部署Java项目所需要的，如果你要部署的项目不是，可以忽略。</li>
<li><strong>JDK</strong>：这个是部署Java项目所需要的，如果你要部署的项目不是，可以忽略。</li>
<li><strong>NodeJs</strong>：这个是部署前端项目所有需要的，如果你要部署的项目不是，可以忽略。我这里用的是nvm下载的nodejs，你们也可以选择直接下载nodejs。</li>
</ul>
<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>首先打开<a href="https://hub.docker.com/">DockerHub</a>搜索你想要的镜像，这里直接搜索 <strong>Jenkins</strong>，这里打不开就上点魔法。</p>
<p><img src="https://hexo.lcgui.cn/article/202405071723781.png" alt="image-20240507172301632"></p>
<p>进入后，可以直接点击复制命令，然后到你的服务器拉取镜像即可。值得注意的是，现在的新版Jenkins已经不支持JDK8版本了，所以你可能要自行下载JDK的高版本，推荐 11 17 21的长期支持版本。</p>
<p><img src="https://hexo.lcgui.cn/article/202405071724499.png" alt="image-20240507172448440"></p>
<p>当然还有个更好的办法，可以直接选择携带JDK版本的镜像直接使用，这里我选择的是JDK7的版本。该版本中本身携带了JDK17和GIT，非常方便。版本选择如下：</p>
<p><img src="https://hexo.lcgui.cn/article/202405071730483.png" alt="image-20240507173026393"></p>
<p>接下来把你复制的命令直接到你的服务器，直接运行即可。</p>
<p><img src="https://hexo.lcgui.cn/article/202405080900032.png" alt="image-20240508085954853"></p>
<p>等他下载完成，可以使用查看镜像命令查看镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img src="https://hexo.lcgui.cn/article/202405080940658.png" alt="image-20240508094035555"></p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p> 我要部署的是Java项目，所以我要准备maven，如果你的项目用不到，可以跳过本步骤</p>
<h4 id="配置Maven"><a href="#配置Maven" class="headerlink" title="配置Maven"></a>配置Maven</h4><p>打开<a href="https://maven.apache.org/download.cgi">Maven官网</a> 进行下载</p>
<p><img src="https://hexo.lcgui.cn/article/202405080949028.png" alt="image-20240508094917955"></p>
<p>下载完成后，手动上传到你的服务器</p>
<p><img src="https://hexo.lcgui.cn/article/202405080950382.png" alt="image-20240508095027355"></p>
<p>解压压缩包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf 压缩包名称</span><br></pre></td></tr></table></figure>





<p>配置环境变量，直接在编辑文件 <code>/etc/profile</code> 添加配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># maven 环境变量</span><br><span class="line">export MAVEN_HOME=/export/maven/apache-maven-3.9.6</span><br><span class="line">export PATH=$MAVEN_HOME/bin:$PATH</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>配置完成后，你可以通过下面的命令查看maven的版本，如果正常出现版本号则是正常。如果提示你没有JDK环境则是要配置JDK环境。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure>



<p>我这里没有单独安装jdk，我直接使用的是Jenkins内部的jdk 把jdk挂载出来以后 配置到本机上配置环境变量即可。你们也可以自己单独安装下JDK，这里就不再赘述了，直接展示下jdk配置就好了。</p>
<p><strong>注意：</strong>如果你也想使用Jenkins内部的jdk拿来用，你要先启动容器，在进行配置全局变量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># jenkins 内部的JDK17</span><br><span class="line">export JAVA_HOME=/var/lib/docker/volumes/jenkins_jenkins-jdk17/_data</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>



<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>下面这里是我使用docker-compose启动容器的脚本。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">jenkins-data:</span></span><br><span class="line">  <span class="attr">jenkins-jdk17:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jenkins:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jenkins/jenkins:latest-jdk17</span></span><br><span class="line">    <span class="comment"># 以特权模式运行容器，允许容器内的进程拥有宿主机上的所有权限。这可以用来执行一些需要更高权限级别的操作</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    	<span class="comment"># 这里是Jenkins的数据存储位置</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">jenkins-data:/var/jenkins_home</span></span><br><span class="line">      	<span class="comment"># 把Jenkins内部自带的jdk拿出来用</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">jenkins-jdk17:/opt/java/openjdk</span></span><br><span class="line">      	<span class="comment"># 把maven映射到容器内部</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/export/maven/apache-maven-3.9.5:/usr/local/maven</span></span><br><span class="line">      	<span class="comment"># nodejs映射到容器内部</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/export/nvm/nvm-0.39.5/versions/node/v14.21.3:/usr/local/nodejs</span></span><br><span class="line">      <span class="comment"># Docker套接字文件挂载到容器中，容器中可以与宿主机中docker通信</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># 可以使用和管理宿主机上的Docker引擎</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/bin/docker:/usr/bin/docker</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">50000</span><span class="string">:50000</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jenkins</span></span><br><span class="line">    <span class="attr">mem_limit:</span> <span class="string">800m</span> <span class="comment"># 内存最大为800MB</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">&quot;always&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>启动完成后，可以查看下容器的状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>



<h3 id="配置Jenkins"><a href="#配置Jenkins" class="headerlink" title="配置Jenkins"></a>配置Jenkins</h3><p>启动没问题以后，你就可以直接打开你的Jenkins了，访问地址就是<code>你服务器ip:你设置的端口</code>，如果进不去，请自行检查你的Jenkins是否启动成功，和你服务器的防火墙。</p>
<ol>
<li>进来后的也买你如下：</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202405081051484.png" alt="image-20240508105116423"></p>
<ol start="2">
<li>按照他的要求去找到密码即可，因为启动的时候，我已经把这个数据文件夹挂载出来了，所以直接到数据卷中查找即可。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有数据卷</span></span><br><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>

<p>找到Jenkins数据的数据卷：</p>
<p><img src="https://hexo.lcgui.cn/article/202405081053933.png" alt="image-20240508105328865"></p>
<p>查看数据卷的地址，进入找到对应的密码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看数据卷的信息</span></span><br><span class="line">docker volume inspect jenkins_jenkins-data</span><br></pre></td></tr></table></figure>

<p><img src="https://hexo.lcgui.cn/article/202405081055070.png" alt="image-20240508105519936"></p>
<p>这是我查看密码的步骤：</p>
<p><img src="https://hexo.lcgui.cn/article/202405081057297.png" alt="image-20240508105700192"></p>
<ol start="3">
<li>复制你的密码到浏览器的Jenkins中，进行下一步</li>
<li>安装推荐的插件</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202405081058184.png" alt="image-20240508105832124"></p>
<p>安装完成之后，创建你的账号即可：</p>
<p><img src="https://hexo.lcgui.cn/article/202405081105480.png" alt="image-20240508110539432"></p>
<p>至此你的Jenkins就安装好了，至于具体的配置本篇文章就不在赘述了：</p>
<p><img src="https://hexo.lcgui.cn/article/202405081106559.png" alt="image-20240508110649479"></p>
<h3 id="遇到的BUG"><a href="#遇到的BUG" class="headerlink" title="遇到的BUG"></a>遇到的BUG</h3><h4 id="Maven依赖下载权限不足"><a href="#Maven依赖下载权限不足" class="headerlink" title="Maven依赖下载权限不足"></a>Maven依赖下载权限不足</h4><p>在构建项目的时候需要下载maven依赖，会出现如下的问题：</p>
<p><img src="https://hexo.lcgui.cn/article/202405081449833.png" alt="image-20240508144907786"></p>
<p><img src="https://hexo.lcgui.cn/article/202405081449226.png" alt="image-20240508144921187"></p>
<p>这个问题是由于你设置的maven本地仓库的权限问题。容器内部的权限等级没有这么高，而你如果是管理员创建的仓库文件夹，就会导致 容器内部下载的依赖无法写入导致问题。</p>
<p>解决方案：直接在你的宿主机，设置本地仓库的权限，让其他人员也能写入即可。</p>
<h4 id="构建Docker镜像权限不足"><a href="#构建Docker镜像权限不足" class="headerlink" title="构建Docker镜像权限不足"></a>构建Docker镜像权限不足</h4><p>使用DockerFile构建你的项目镜像的时候，报错提示：</p>
<p><img src="https://hexo.lcgui.cn/article/202405081601909.png" alt="image-20240508160111846"></p>
<p>类似这种就是你的Jenkins容器中的Docker权限不足，因为之前的Docker是挂载进去的，容器呢不没有这么高的权限导致无法构建项目。</p>
<p>解决方案：在你的宿主机内，设置docker.socket的权限。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod -R 777 /var/run/docker.sock</span><br></pre></td></tr></table></figure>

<p>设置完再去运行你的流水线。</p>
<p><img src="https://hexo.lcgui.cn/article/202405081604162.png" alt="image-20240508160400118"></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>运维</tag>
        <tag>必看</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透入门使用</title>
    <url>/2024/05/27/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="内网穿透入门使用"><a href="#内网穿透入门使用" class="headerlink" title="内网穿透入门使用"></a>内网穿透入门使用</h1><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><ul>
<li><p>什么是内网穿透：</p>
<p>首先我们对内网和外网这两个名词做个解释：</p>
<p>1、内网：是内部建立的局域网络或办公网络；</p>
<p>2、外网：是通过一个网关或网桥与其他网络系统连接，相对于自己的内网来说，其他网络系统称为外网。</p>
<p>内网穿透简单来说就是将内网外网通过隧道打通,让内网的数据让外网可以获取。比如常用的办公室软件等，一般在办公室应用，通过拨号上网，没有公网IP，这样办公软件只有在办公室本地的局域网之内才能访问，用了内网穿透方案后，这些基于内网访问的办公室软件就可以在外网家里访问了。</p>
</li>
<li><p>如果不了解内网，公网这些概念的话，我感觉这篇文章也是看不懂，可以看看别人的文章先：<a href="https://blog.csdn.net/u010020099/article/details/82148798">内网、网关、公网IP的关系</a>， <a href="https://blog.csdn.net/brvs28856/article/details/100951364">一文读懂内网、公网和NAT</a>。</p>
</li>
</ul>
<h2 id="穿透工具推荐"><a href="#穿透工具推荐" class="headerlink" title="穿透工具推荐"></a>穿透工具推荐</h2><p>这里推荐两款我自己用的：<code>frp</code>和<code>natapp</code>。</p>
<p><strong>frp：</strong></p>
<p>使用本款软件的话你需要本身有一台拥有公网ip的服务器才可以使用，因为这个软件要借助你自己的公网ip打通隧道将你内网的端口代理出去。可以用来打造堡垒机，跳板机等。</p>
<p><strong>natapp：</strong></p>
<p>这款白嫖党狂喜，因为有免费的额度，同时也不需要自己拥有服务器也可以使用，适合白嫖党。当然免费版功能上肯定是稍微拉跨点的，不过自己测试拿来玩什么的还都是没什么问题的。</p>
<h2 id="Frp"><a href="#Frp" class="headerlink" title="Frp"></a>Frp</h2><h3 id="Frp下载安装"><a href="#Frp下载安装" class="headerlink" title="Frp下载安装"></a>Frp下载安装</h3><p>打开<a href="https://github.com/fatedier/frp/releases">frp官网</a>自己选个版本下载就行了，打不开的话自己上点科技，因为是在github上面的。</p>
<p>这里需要注意下：frp分为<code>服务端</code>和<code>客户端</code>服务端是放在你的服务器上面的，客户端时放在内网机器上的，当然下载的时候你要匹配自己系统就行了，linux就下载linux版本，windows就下载windows版本。</p>
<p>我这里服务端是linux，客户端是windows的</p>
<p><img src="https://hexo.lcgui.cn/article/202405271703157.png" alt="image-20240527153818056"></p>
<p>下载完成后，linux的直接传到服务器上解压即可。windows也是解压就行了。</p>
<h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><p>解压完成后文件如下：</p>
<p><img src="https://hexo.lcgui.cn/article/202405271541561.png" alt="image-20240527154125529"></p>
<p>其中这里面的<code>frpc</code>是客户端的启动程序，因为我们这里是做服务端的，所以这个没用，你可以选择保留或者直接删除。<code>frps</code>是服务端的启动程序，我们待会要用这个。</p>
<p><code>toml</code>结尾的文件是对应的配置文件，如果你的版本比较落后的话应该是<code>ini</code>结尾的配置文件，新版的应该都改成<code>toml</code>结尾的文件了。</p>
<p><strong>服务端配置：</strong></p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frp监听的端口，默认是7000，可修改</span></span><br><span class="line"><span class="comment"># bindAddr = &quot;0.0.0.0&quot; # 绑定地址，0.0.0.0 表示监听所有地址</span></span><br><span class="line"><span class="attr">bindPort</span> = <span class="number">7000</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启Dashboard用于管理和查看服务状态。Dashboard端口、用户名和密码，请改成更复杂的。</span></span><br><span class="line"><span class="attr">webServer.addr</span> = <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="attr">webServer.port</span> = <span class="number">7500</span></span><br><span class="line"><span class="attr">webServer.user</span> = <span class="string">&quot;登陆账号&quot;</span></span><br><span class="line"><span class="attr">webServer.password</span> = <span class="string">&quot;登陆密码&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权码，请改成更复杂的，这个token之后在客户端会用到</span></span><br><span class="line"><span class="attr">auth.method</span> = <span class="string">&quot;token&quot;</span></span><br><span class="line"><span class="attr">auth.token</span> = <span class="string">&quot;这里可以自己生成一个密钥(多少位自己随意)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除访问限速</span></span><br><span class="line"><span class="attr">transport.tcpMux</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># frp日志配置</span></span><br><span class="line"><span class="attr">log.to</span> = <span class="string">&quot;/export/frp/logs/frps.log&quot;</span>  <span class="comment"># 日志路径按照自己的需求更改</span></span><br><span class="line"><span class="attr">log.level</span> = <span class="string">&quot;info&quot;</span></span><br><span class="line"><span class="attr">log.maxDays</span> = <span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果对这些参数有些疑问什么的，可以自行到<a href="https://gofrp.org/zh-cn/">手册官网</a>自行查看。</p>
<h3 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h3><p>如果你想使用<code>systemctl</code>来控制frp：</p>
<ol>
<li><strong>如果您的 Linux 服务器上尚未安装 systemd，可以使用包管理器如 <code>yum</code>（适用于 CentOS&#x2F;RHEL）或 <code>apt</code>（适用于 Debian&#x2F;Ubuntu）来安装它：</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 yum 安装 systemd（CentOS/RHEL）</span></span><br><span class="line">yum install systemd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 apt 安装 systemd（Debian/Ubuntu）</span></span><br><span class="line">apt install systemd</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>使用文本编辑器 (如 vim) 在 <code>/etc/systemd/system</code> 目录下创建一个 <code>frps.service</code> 文件，用于配置 frps 服务。</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/frps.service</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>写入内容</strong></li>
</ol>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="comment"># 服务名称，可自定义</span></span><br><span class="line"><span class="attr">Description</span> = frp server</span><br><span class="line"><span class="attr">After</span> = network.target syslog.target</span><br><span class="line"><span class="attr">Wants</span> = network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span> = simple</span><br><span class="line"><span class="comment"># 启动frps的命令，需修改为您的frps的安装路径</span></span><br><span class="line"><span class="attr">ExecStart</span> = 你的frpc的路径 -c 你的frps.toml的路径</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span> = multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>使用 systemd 命令管理 frps 服务</strong></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动frp</span><br><span class="line">sudo systemctl start frps</span><br><span class="line"># 停止frp</span><br><span class="line">sudo systemctl stop frps</span><br><span class="line"># 重启frp</span><br><span class="line">sudo systemctl restart frps</span><br><span class="line"># 查看frp状态</span><br><span class="line">sudo systemctl status frps</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>设置 frps 开机自启动</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable frps</span><br></pre></td></tr></table></figure>

<p><img src="https://hexo.lcgui.cn/article/202405271606621.png" alt="image-20240527160618496"></p>
<p>这样就是启动好了。</p>
<h3 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h3><p><img src="https://hexo.lcgui.cn/article/202405271607453.png" alt="image-20240527160727421"></p>
<p>同样，解压出来还是这些熟悉的文件，<strong>注意：不要直接点击exe文件启动，要使用cmd命令启动。</strong></p>
<p>如下是客户端的配置：</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端公网IP、监听端口bind_port</span></span><br><span class="line"><span class="attr">serverAddr</span> = <span class="string">&quot;43.139.50.156&quot;</span></span><br><span class="line"><span class="attr">serverPort</span> = <span class="number">7000</span> <span class="comment">#这里跟服务端必须一样</span></span><br><span class="line"></span><br><span class="line"><span class="attr">webServer.addr</span> = <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="attr">webServer.port</span> = <span class="number">7500</span> </span><br><span class="line"><span class="attr">webServer.user</span> = <span class="string">&quot;登陆账号&quot;</span></span><br><span class="line"><span class="attr">webServer.password</span> = <span class="string">&quot;登陆密码&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权码</span></span><br><span class="line"><span class="attr">auth.method</span> = <span class="string">&quot;token&quot;</span></span><br><span class="line"><span class="attr">auth.token</span> = <span class="string">&quot;这里可以自己生成一个密钥(多少位自己随意)&quot;</span></span><br><span class="line"><span class="comment"># 设置心跳</span></span><br><span class="line"><span class="attr">auth.additionalScopes</span> = [<span class="string">&quot;HeartBeats&quot;</span>]</span><br><span class="line"><span class="comment"># 去除访问限速</span></span><br><span class="line"><span class="attr">transport.tcpMux</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># frp日志配置</span></span><br><span class="line"><span class="attr">log.to</span> = <span class="string">&quot;.logs/frpc.log&quot;</span></span><br><span class="line"><span class="attr">log.level</span> = <span class="string">&quot;info&quot;</span></span><br><span class="line"><span class="attr">log.maxDays</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[proxies]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;代理的名称&quot;</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;tcp&quot;</span></span><br><span class="line"><span class="attr">localIP</span> = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="attr">localPort</span> = <span class="number">51602</span> <span class="comment"># 内网需要代理的端口</span></span><br><span class="line"><span class="attr">remotePort</span> = <span class="number">24524</span> <span class="comment"># 访问服务端的端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解释下上面的这两个端口什么意思 localPort 是你内网需要被代理的端口 ，remotePort是你服务端要访问的端口， 实际上 比如你服务端的ip地址是 1.1.1.1 客户端的地址是192.168.101.101，那么我访问 1.1.1.1:24524就实际访问到的是你192.168.101.101:51602</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[proxies]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;代理的名称2&quot;</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;tcp&quot;</span></span><br><span class="line"><span class="attr">localIP</span> = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="attr">localPort</span> = <span class="number">51601</span></span><br><span class="line"><span class="attr">remotePort</span> = <span class="number">24525</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># name 为服务名称，下方解释：访问frp服务端的2288端口时，等同于通过中转服务器访问127.0.0.1的22端口。</span></span><br><span class="line"><span class="comment"># type 为连接的类型，此处为tcp</span></span><br><span class="line"><span class="comment"># localIP 为中转客户端实际访问的IP</span></span><br><span class="line"><span class="comment"># localPort 为目标端口</span></span><br><span class="line"><span class="comment"># remotePort 为远程端口，记得服务端的防火墙打开这个端口</span></span><br></pre></td></tr></table></figure>

<h3 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h3><p>使用cmd进入到frp的目录，使用如下命令启动，不可以直接点击exe执行文件启动。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frpc.exe -c frpc.toml</span><br></pre></td></tr></table></figure>

<p><img src="https://hexo.lcgui.cn/article/202405271618022.png"></p>
<p>如果你嫌麻烦，每次都要使用命令启动，你可以将此命令封到<code>bat</code>文件中，只需要启动bat文件即可</p>
<p><img src="https://hexo.lcgui.cn/article/202405271623241.png" alt="image-20240527162332199"></p>
<p>你想要关闭的时候最好是采用<code>ctrl+c</code>的按键方式关闭，最好不要直接点击关闭。</p>
<h3 id="效果查看"><a href="#效果查看" class="headerlink" title="效果查看"></a>效果查看</h3><p>启动后会被阻塞，就是启动成功了。你现在就可以到你的可视化界面查看了，就是默认7500端口的那个。</p>
<p><img src="https://hexo.lcgui.cn/article/202405271620373.png" alt="image-20240527162012320"></p>
<p>这里就能看到效果了，当然服务端那边也可以查看了，如下图：</p>
<p><img src="https://hexo.lcgui.cn/article/202405271621832.png" alt="image-20240527162133777"></p>
<p>这样就是成功了，你的内网能够被所有人访问了。</p>
<p><strong>堡垒机&#x2F;跳板机：</strong></p>
<p>这里稍微讲一下堡垒机和跳板机就行了，跳板机属于堡垒机的一种，你没有公网的服务器是没办法直接被访问的，所以需要一台有公网的作为跳板，使用frp，将内网服务器的<code>22</code>端口代理出去，这样就能通过跳板操作内网服务器了。</p>
<h2 id="NATApp"><a href="#NATApp" class="headerlink" title="NATApp"></a>NATApp</h2><h3 id="NATApp下载安装"><a href="#NATApp下载安装" class="headerlink" title="NATApp下载安装"></a>NATApp下载安装</h3><p>直接到<a href="https://natapp.cn/">NatApp官网</a>进行下载，一般是内网的客户端下载，所以我这里就是windows版本了：</p>
<p><img src="https://hexo.lcgui.cn/article/202405271630045.png" alt="image-20240527163029995"></p>
<p>下载完成后，直接解压就行，里面只有一个exe执行文件。</p>
<h3 id="NATApp配置"><a href="#NATApp配置" class="headerlink" title="NATApp配置"></a>NATApp配置</h3><p>仍然是打开natapp的官网，注册一个账号，如果已有账号直接登录即可。</p>
<p>登陆后到达控制台：</p>
<p><img src="https://hexo.lcgui.cn/article/202405271637645.png" alt="image-20240527163718447"></p>
<p>购买一个免费的隧道：</p>
<p><img src="https://hexo.lcgui.cn/article/202405271639713.png" alt="image-20240527163920656"></p>
<p>买完以后，点击<code>我的隧道</code>，复制<code>authtoken</code>待会要用：</p>
<p><img src="https://hexo.lcgui.cn/article/202405271640638.png" alt="image-20240527164031490"></p>
<p>复制完，回到你的电脑创建一个文件夹，将你下载的<code>natapp.exe</code>文件放进去，同时再创建一个<code>config.ini</code>文件：</p>
<p><img src="https://hexo.lcgui.cn/article/202405271705133.png" alt="image-20240527164151464"></p>
<p>其中<code>config.ini</code>中的内容是：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将本文件放置于natapp同级目录 程序将读取 [default] 段</span></span><br><span class="line"><span class="comment">#在命令行参数模式如 natapp -authtoken=xxx 等相同参数将会覆盖掉此配置</span></span><br><span class="line"><span class="comment">#命令行参数 -config= 可以指定任意config.ini文件</span></span><br><span class="line"><span class="section">[default]</span></span><br><span class="line"><span class="comment">#对应一条隧道的authtoken</span></span><br><span class="line"><span class="attr">authtoken</span>=这里粘贴你刚才复制的authtoken</span><br><span class="line">clienttoken=                    <span class="comment">#对应客户端的clienttoken,将会忽略authtoken,若无请留空,</span></span><br><span class="line"><span class="attr">log</span>=none                        <span class="comment">#log 日志文件,可指定本地文件, none=不做记录,stdout=直接屏幕输出 ,默认为none</span></span><br><span class="line"><span class="attr">loglevel</span>=ERROR                  <span class="comment">#日志等级 DEBUG, INFO, WARNING, ERROR 默认为 DEBUG</span></span><br><span class="line">http_proxy=                  <span class="comment">#代理设置 如 http://10.123.10.10:3128 非代理上网用户请务必留空</span></span><br></pre></td></tr></table></figure>

<p>如果对配置文件有疑问，可以了解 <a href="https://natapp.cn/article/config_ini">官方配置</a>。</p>
<h3 id="启动NATApp"><a href="#启动NATApp" class="headerlink" title="启动NATApp"></a>启动NATApp</h3><p>直接点击<code>natapp.exe</code>执行即可，他会自动读取配置文件。</p>
<h2 id="使用途径"><a href="#使用途径" class="headerlink" title="使用途径"></a>使用途径</h2><p><strong>场景一：企业远程办公</strong></p>
<p>企业用户购买了企业管理系统、财务系统、人力资源系统，分公司与总部不在同一城市，分公司需要远程访问总部系统；</p>
<p><strong>场景二：开发人员远程调试</strong></p>
<p> 放在家里的树莓派,服务器等,需要远程ssh管理,这样打通服务器的22端口即可远程通过ssh操作服务器了.</p>
<p><strong>场景三：数据远程同步</strong></p>
<p>一些企业内部数据库,由于安全等原因,不愿意放到云服务器上,可以将数据库放到办公室本地,然后通过天联传输通道传输，这样既保证安全,又保证公网可以正常访问</p>
<p><strong>场景四：远程监控</strong></p>
<p>一些设备的运行监控信息，可以远程监控管理,可以方便的管理监控各个设备的运行情况.</p>
<p><strong>场景五：远程联机游戏</strong></p>
<p> 这里我简单说一下我的世界游戏联机，我的世界联机的话，创建完以后，开放联机的时候会产生一个端口，无论你是用frp还是natapp都可以使用的，你的朋友输入如果是frp的话就输入服务端的ip+端口，如果是natapp的话会产生一个url完事就能联机了。</p>
<p><strong>场景六：文件远程共享</strong></p>
<p>FTP共享文件、NAS文件存储，可以通过天联实现远程共享、下载、上传；</p>
<p><strong>其他使用途径</strong></p>
<p>如若还有其他的使用途径，靠大家自己发现。</p>
]]></content>
      <categories>
        <category>自学之路</category>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>必看</tag>
        <tag>网络</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>宿主机与虚拟器之间的代理</title>
    <url>/2024/11/10/%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%B8%8E%E8%99%9A%E6%8B%9F%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="宿主机与虚拟器之间的代理"><a href="#宿主机与虚拟器之间的代理" class="headerlink" title="宿主机与虚拟器之间的代理"></a>宿主机与虚拟器之间的代理</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于公司vpn使用时，需要强制安装360杀毒，我不想装在宿主机中，所以研究了一下虚拟机中使用vpn连接公司网络，宿主机使用虚拟机中的代理，进而宿主机中也可以使用公司网络。</p>
<h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ol>
<li>EasyConnect VPN连接工具（非必须，我们公司使用的是这个）</li>
<li>Vmware虚拟机（必须，其他虚拟机也可）</li>
<li>Proxifier代理工具（非必须）</li>
<li>ccproxy 正向代理工具（必须，其他正代工具也可）</li>
</ol>
<h2 id="思路说明"><a href="#思路说明" class="headerlink" title="思路说明"></a>思路说明</h2><p>主要思路是（按照<mark class="hl-label default">宿主机使用虚拟机中的代理为例</mark> ）：虚拟机中连接vpn –&gt; 虚拟机中开启正向代理，把虚拟机弄成代理服务器 –&gt; 宿主机使用Proxifier或者系统自带代理功能，连接虚拟机的代理服务器即可。</p>
<h2 id="虚拟机网络设置"><a href="#虚拟机网络设置" class="headerlink" title="虚拟机网络设置"></a>虚拟机网络设置</h2><ul>
<li>虚拟机网络模式 你可以选择<mark class="hl-label default">NAT模式</mark> 或者<mark class="hl-label default">桥接模式</mark> ，但是这两种还是有区别的</li>
<li>NAT模式：按道理来说，通过NAT模式搭建网络的虚拟机，宿主机和虚拟机不在同一网段，只能虚拟机ping通宿主机，而宿主机无法ping通虚拟机的，所有理论上来讲需要通过虚拟机的<mark class="hl-label default">端口映射</mark> 功能才能正常使用的。<mark class="hl-label red">但是</mark> ，通过实测发现，是直接可以互相ping通的可以直接使用，但是为什么能ping通我也没想清楚，毕竟他们不在同一网段</li>
</ul>
<p><img src="https://hexo.lcgui.cn/article/202411102231083.png" alt="image-20241110223128023"></p>
<mark class="hl-label orange">如果你没ping通</mark> ，那么就是你的防火墙没关，那要是如果你不想关闭防火墙，还想可以通信的话就需要：<span class='p red'>控制面板 --> 系统和安全 -->Windows Defender防火墙 --> 允许应用通过Windows Defender防火墙进行通信 -->勾选上 文件和打印机共享</span>

<p><img src="https://hexo.lcgui.cn/article/202411102237155.png" alt="image-20241110223700123"></p>
<ul>
<li>桥接模式，这个模式，是相当于吧虚拟机的等级提升到跟你宿主机一个级别，让宿主机和虚拟机在同一个网络下，也就是在同一内网中，既然在同一内网那肯定是可以互相通信的。</li>
</ul>
<p><img src="https://hexo.lcgui.cn/article/202411102224340.png" alt="image-20241110222422288"></p>
<h2 id="宿主机使用虚拟机中代理"><a href="#宿主机使用虚拟机中代理" class="headerlink" title="宿主机使用虚拟机中代理"></a>宿主机使用虚拟机中代理</h2><p>现在假设我已经在虚拟机中连接上了公司的vpn，那么接下来要用ccproxy 正代工具，值得注意的是ccproxy 只适用于Windows，如果想用linux的话建议使用apache的httpd，或者可以使用其他的。</p>
<ol>
<li>打开ccproxy后先进行设置</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202411102211862.png" alt="image-20241110221112825"></p>
<ol start="2">
<li>如果你的<mark class="hl-label default">自动检测</mark> 是勾选的，并且后面的ip不是你虚拟机的ip，你需要<mark class="hl-label default">取消勾选</mark> ，然后选择好你的ip，勾选上后面的选择框锁定。其中协议的话如果没有其他需要的话，建议和我选的一样即可，有其他需要自己再做选择。</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202411102212257.png"></p>
<ol start="3">
<li>这样就可以在宿主机中使用虚拟机中的vpn了。先配置好代理服务器为你的虚拟机服务器</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202411102248876.png" alt="image-20241110224844837"></p>
<p>如果你没看到http的选项，可以在如下位置找到</p>
<p><img src="https://hexo.lcgui.cn/article/202411102253113.png" alt="image-20241110225316085"></p>
<ol start="4">
<li>接下来要配置<mark class="hl-label default">代理规则</mark> </li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202411102257472.png" alt="image-20241110225724436"></p>
<p><img src="https://hexo.lcgui.cn/article/202411102259674.png" alt="image-20241110225922652"></p>
<p>这样的话你应该就可以直接在宿主机中访问公司的环境了。</p>
<p>但是如果你们公司的环境中有用域名的地址，并且域名没有在公网进行解析的话，宿主机中是无法访问的，你需要手动配置你电脑的dns也就是hosts文件，该文件路径为：<mark class="hl-label default">C:\Windows\System32\drivers\etc\hosts</mark> </p>
<p>前面ip后面域名即可。如果你不知道域名对应的ip，直接在你的虚拟机中 ping 对应域名就能看到了</p>
<p><img src="https://hexo.lcgui.cn/article/202411102303081.png" alt="image-20241110230331058"></p>
<h2 id="虚拟机使用宿主机中代理"><a href="#虚拟机使用宿主机中代理" class="headerlink" title="虚拟机使用宿主机中代理"></a>虚拟机使用宿主机中代理</h2><p>虚拟使用宿主机中代理的情况多数是 虚拟机想用宿主机中的梯子进行外网访问而与。这种的话就比较简单，因为梯子的连接软件，本身内置了局域网连接功能，如下。</p>
<p><img src="https://hexo.lcgui.cn/article/202411102306403.png" alt="image-20241110230640369"></p>
<p>只需要打开这个功能，然后在虚拟机的网络中设置代理，即可。</p>
<p><img src="https://hexo.lcgui.cn/article/202411102308445.png" alt="image-20241110230849402"></p>
<p>这样虚拟机中就可以直接使用，宿主机梯子的网络了</p>
<p><img src="https://hexo.lcgui.cn/article/202411102309547.png" alt="image-20241110230924511"></p>
<p>当然 <mark class="hl-label default">宿主机使用虚拟机代理的时候也可以用这种方式</mark> ，但是这种方式只能支持http的协议，也就是ccproxy中开放的808端口了，并且这种代理只能全局代理也就是 所有的软件都要经过代理不能指定软件。</p>
<p>当然也可以用 Proxifier软件。这个代理协议是http的。自行设置即可。</p>
<h2 id="软件及VPN分享"><a href="#软件及VPN分享" class="headerlink" title="软件及VPN分享"></a>软件及VPN分享</h2><ul>
<li><p><a href="http://update.youngzsoft.com/ccproxy/update/ccproxysetup.exe">CCproxy</a></p>
</li>
<li><p><a href="https://www.123pan.com/s/4CUpTd-xcN4h">Proxifier</a></p>
<p><strong>提取码： GJAO</strong></p>
</li>
<li><p><a href="https://sakura-cat1.com/register?code=vr5p7wab">梯子链接一</a></p>
</li>
<li><p><a href="https://sakura-cat2.com/register?code=vr5p7wab">梯子链接二</a></p>
</li>
<li><p><a href="https://sakura-cat-cdn2.com/register?code=vr5p7wab">梯子链接三</a></p>
</li>
</ul>
<p>其他的就自行网络上找吧。</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>易班答题助手使用手册</title>
    <url>/2024/03/22/%E6%98%93%E7%8F%AD%E7%AD%94%E9%A2%98%E5%8A%A9%E6%89%8B%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="易班答题助手使用手册"><a href="#易班答题助手使用手册" class="headerlink" title="易班答题助手使用手册"></a>易班答题助手使用手册</h1><h4 id="开发背景"><a href="#开发背景" class="headerlink" title="开发背景"></a>开发背景</h4><blockquote>
<p>易班主要用于马克思主义学院的考试答题使用，作为我们的成绩的一部分，每次做题可称为痛苦不堪，最初使用“学小易App”进行手动搜题，每次动辄几十道题目可谓痛苦，后来“学小易App”开启次数限制，每次搜几个还要看一分钟广告，后来出现其他的刷课，这个结果大家也是比较熟知，被举报后成绩作废，但是现在还要面临易班答题的问题，所以我写了这个简陋版的答题助手，提供给有需要的人</p>
</blockquote>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><h5 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h5><ul>
<li>这个工具不是自动答题易班的考试，是自动帮你搜索题目并把搜索到的题目显示出来，你根据搜索到的题目回答你的考试问题即可。</li>
<li>理论上讲是不会被抓，因为本质是还是自己手动答题，只不过是帮助你省略了搜题的步骤，可以直接看到搜到的题</li>
<li>搜题来源来自“学小易”准确度比较高，有少许几道搜不到是正常的，很难做到100%正确率</li>
<li><img src="https://hexo.lcgui.cn/article/202403241217749.png" alt="image-20240322173728225"></li>
</ul>
<h5 id="使用须知"><a href="#使用须知" class="headerlink" title="使用须知"></a>使用须知</h5><ul>
<li>启动易班答题助手需要三个参数分别为：<mark class="hl-label default">易班的Token</mark> 、<mark class="hl-label default">易班的JSESSIOID</mark> 、<mark class="hl-label default">Wx_Open_Id</mark> </li>
<li>其中 易班的两个参数很容易获得，Wx_Open_Id 需要抓包获得</li>
<li>这三个参数中Token 和 Wx_Open_Id 是固定不变的 第一次获取到后可以记录下来 方便后续的使用，JSESSIOID是否固定不清楚，不过一般来说是不会固定的，所以最好每次使用的时候获取一次</li>
<li>我的建议是，先看完整篇使用手册感觉自己可以做，在进行实际操作，感觉有点困难，请联系你那学计算机的朋友。</li>
<li>Wx_Open_ID大家是可以通用的，也就是如果使用者A获取到的 Wx_Open_ID 是可以提供给 使用者BCD使用的，暂时学小易也没有对每个微信账户进行次数限制，所以建议大家分享的时候分享给自己的朋友即可，使用太多次有没有什么后果我也不清楚。</li>
<li>请先根据目录查看 “<mark class="hl-label default">常见问题</mark> ” 相关内容再使用该助手</li>
</ul>
<h5 id="下载易班助手"><a href="#下载易班助手" class="headerlink" title="下载易班助手"></a>下载易班助手</h5><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://pan.baidu.com/s/1ZBsEGenWLcFaSnthJul2-Q?pwd=6666">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">易班小助手</div>
            <div class="tag-link-sitename"> 易班小助手下载地址</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<h5 id="获取-Wx-Open-Id"><a href="#获取-Wx-Open-Id" class="headerlink" title="获取 Wx_Open_Id"></a>获取 Wx_Open_Id</h5><blockquote>
<p>获取 Wx_Open_Id 需要抓包 也蛮简单的 无需担心，因为学小易App限制次数 没办法查询题目了 只能另辟蹊径，后面再同学哪里获知 小程序是可以无限制使用的，所以要依赖于微信的小程序，那么小程序就都得使用 Wx_Open_Id 所以我们必须得获取 这个 不然没办法使用小程序 也就没办法使用 小助手</p>
</blockquote>
<h5 id="下载-Burp-Suite"><a href="#下载-Burp-Suite" class="headerlink" title="下载 Burp Suite"></a>下载 Burp Suite</h5><p>Burp Suite是一个抓包工具，我们接下来要使用这个 去获取你的 Wx_Open_Id， 下面是我打包的 可能版本有点落后，想用新版可以自行百度下载</p>
<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://pan.baidu.com/s/1AHTYySfsiHeJhy2eAa9qXg?pwd=6666">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Burp Suite</div>
            <div class="tag-link-sitename"> Burp Suite下载地址</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>


<h5 id="使用Burp-Suite抓包"><a href="#使用Burp-Suite抓包" class="headerlink" title="使用Burp Suite抓包"></a>使用Burp Suite抓包</h5><ol>
<li>登陆上你的微信  左上角搜索学小易</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202403221726553.png"></p>
<ol start="2">
<li>点击进入 小程序</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202403221726704.png"></p>
<ol start="3">
<li><p>打开 Burp Suite -&gt; 下一步-&gt;进入-&gt;代理-&gt;添加-&gt;端口弄成8080即可</p>
<div class="tip warning"><p>如果你打不开 可能是电脑没有Java环境，因为这个软件是Java开发依赖于Java环境，如果打不开可以自行百度 Burp Suite安装教程</p>
</div></li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202403221726543.png" alt="image-20240322164728045"></p>
<p><img src="https://hexo.lcgui.cn/article/202403221726567.png" alt="image-20240322164811076"></p>
<p><img src="https://hexo.lcgui.cn/article/202403221726603.png" alt="image-20240322164857425"></p>
<p>设置完以后 你要打开你的浏览器 输入你刚才设置的地址 并且下载证书</p>
<p><img src="https://hexo.lcgui.cn/article/202403241221131.png" alt="image-20240324122114077"></p>
<p>下载完成后，点击打开并且开始安装证书</p>
<p><img src="https://hexo.lcgui.cn/article/202403241225041.png" alt="image-20240324122526930"></p>
<p><img src="https://hexo.lcgui.cn/article/202403241227167.png" alt="image-20240324122727110"></p>
<p>然后一直点击下一步直至安装成功即可</p>
<p><img src="https://hexo.lcgui.cn/article/202403241228805.png" alt="image-20240324122821756"></p>
<p>这里解释下为什么安装这个证书：因为不安装证书的话 你无法拦截https的请求，我们想要的那个Wx_Open_ID刚好是https的请求 所以你不安装的话 是无法拦截到的，听不懂的话没关系，按步骤做即可。</p>
<ol start="4">
<li>打开你的电脑设置 搜索到这个 设置 点进去</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202403221726694.png" alt="image-20240322165045799"></p>
<ol start="5">
<li>设置代理服务器</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202403221726261.png"></p>
<ol start="6">
<li>这样就ok了 返回 Burp Suite 开始抓包即可</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202403221726882.png" alt="image-20240322165919303"></p>
<p>点击 “拦截禁用” 以后 打开你的学小易小程序 随便搜索一个题目（至少六个字符）</p>
<p><img src="https://hexo.lcgui.cn/article/202403221726744.png" alt="image-20240322170142530"></p>
<p>然后你在这里就能看到你的 Wx_Open_Id 了 现在你可以把它记录下来 留着以后用了</p>
<p>记录完了记得要把  “拦截禁用”  关掉 否则 你的页面会被卡住 ， 也记得把设置的 代理服务器关掉 不然网络无法使用了</p>
<p><img src="https://hexo.lcgui.cn/article/202403221746695.png" alt="image-20240322174613639"></p>
<h5 id="获取Token和JSESSIONID"><a href="#获取Token和JSESSIONID" class="headerlink" title="获取Token和JSESSIONID"></a>获取Token和JSESSIONID</h5><h5 id="登录网页版易班"><a href="#登录网页版易班" class="headerlink" title="登录网页版易班"></a>登录网页版易班</h5><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="http://220.160.52.44:8080/">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">易班网页版</div>
            <div class="tag-link-sitename"> 易班网页版</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<p>正常登录 你的易班即可 </p>
<ol>
<li>登陆成功后 你会来到 如下页面</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202403221726725.png" alt="image-20240322170717909"></p>
<ol start="2">
<li>打开你的浏览器控制台 或者按F12 快捷键也可， 找到 “应用(或者 Application)”，</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202403221726455.png" alt="image-20240322170938833"></p>
<p>这样就找到了你的 token 后面那个值就是 你的token</p>
<ol start="3">
<li>JSESSIONID也是同理</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202403221725596.png" alt="image-20240322171108669"></p>
<p>这样就行了 你就获取到了 三个值 就可以使用小助手了</p>
<h5 id="正式使用"><a href="#正式使用" class="headerlink" title="正式使用"></a>正式使用</h5><ol>
<li>解压出来小助手 打开</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202403221732740.png" alt="image-20240322173200667"></p>
<ol start="2">
<li>把你获取到的 值 填进去 直接输入进去 然后输入你想进行的 考试编号 就可以进行了</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202403221733161.png"></p>
<ol start="3">
<li>页面解释</li>
</ol>
<p><img src="https://hexo.lcgui.cn/article/202403221737302.png" alt="image-20240322173728225"></p>
<div class="tip warning"><p>请注意： 你的答案 大小写无所谓 但是 顺序不能错 否则 本题错误  例如：这道题的答案应该为ABC 你输入 ACB就会答案错误</p>
</div>

<h5 id="答题完成"><a href="#答题完成" class="headerlink" title="答题完成"></a>答题完成</h5><p><img src="https://hexo.lcgui.cn/article/202403221746014.jpg" alt="img"></p>
<p>答题完成会获取到你获得到的分数</p>
<p>可以到成绩列表查看</p>
<p><img src="https://hexo.lcgui.cn/article/202403221746764.jpg" alt="img"></p>
<h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ol>
<li>打开小助手，窗口一闪而过，自动关闭了：这种问题一般出现在 你的“Internet选项“ 里面的代理服务或者 ”Burp Suite“的”拦截请求“选项没有关闭 没有及时关闭</li>
<li>还是一闪而过的情况 有可能你的易班有正在考试的情况，请打开易班网页版，根据提示进入考试 直接交卷即可。有正在考试的情况程序无法成功运行</li>
<li>考试过程中出现网络卡顿，网络不能用的情况。也会导致答题失败，因为暂时没做容错处理，意味着你前面答题的结果全部无效，请保持网络通畅。</li>
<li>网络卡顿明显特征就是 输入完答案，按完回车后 页面卡住不动，等一会自动关闭页面，这一般就是网络导致</li>
<li>最重要的一点：如果出现以上任何一种情况，请手动打开 易班 手机&#x2F;网页版 都可以 会有正在考试的提示，进入后直接交卷，再使用助手答题，也就是 使用助手答题的前提条件是 你的账号不能有正在答题的情况。</li>
</ol>
<h4 id="后续说明"><a href="#后续说明" class="headerlink" title="后续说明"></a>后续说明</h4><ul>
<li>该工具纯属为了方便自己开发，如果造成任何后果 使用者自行承担</li>
<li>后续可能会做简单优化，容错处理，有正在考试的情况自动处理等</li>
<li>后续会把代码分享出来 并且 会说明我的分析过程 遇到的问题等等</li>
<li>因为这个工具是随意开发的 没有很好的规范 有bug在所难免 可以联系QQ: 97706396 或者评论区评论吧</li>
</ul>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>必看</tag>
        <tag>技术</tag>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>部署dify1.2.0页面报错Internal Server Error</title>
    <url>/2025/04/12/%E9%83%A8%E7%BD%B2dify1.2.0%E9%A1%B5%E9%9D%A2%E6%8A%A5%E9%94%99Internal%20Server/</url>
    <content><![CDATA[<h2 id="部署dify1-2-0页面报错Internal-Server-Error"><a href="#部署dify1-2-0页面报错Internal-Server-Error" class="headerlink" title="部署dify1.2.0页面报错Internal Server Error"></a>部署dify1.2.0页面报错Internal Server Error</h2><h3 id="问题表现"><a href="#问题表现" class="headerlink" title="问题表现"></a>问题表现</h3><p>部署完成Dify以后打开页面，登陆成功后发现右上角出现报错：</p>
<p><img src="https://hexo.lcgui.cn/article/202504121613710.png" alt="image-20250412161314639"></p>
<p>F12打开控制台，刷新页面，发现控制台包报错：</p>
<p><img src="https://hexo.lcgui.cn/article/202504121614280.png" alt="image-20250412161419244"></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol>
<li><p>先停止dify</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure>

<p><img src="https://hexo.lcgui.cn/article/202504121616487.png" alt="image-20250412161646448"></p>
</li>
<li><p>修改配置文件<code>.env</code></p>
<p>由</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">PLUGIN_S3_USE_AWS_MANAGED_IAM</span>=</span><br><span class="line">PLUGIN_S3_USE_PATH_STYLE=</span><br></pre></td></tr></table></figure>

<p>修改为：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">PLUGIN_S3_USE_AWS_MANAGED_IAM</span>=<span class="literal">false</span></span><br><span class="line"><span class="attr">PLUGIN_S3_USE_PATH_STYLE</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重新启动即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p><img src="https://hexo.lcgui.cn/article/202504121628412.png" alt="image-20250412162849371"></p>
<ol start="4">
<li><p>效果如下：</p>
<p><img src="https://hexo.lcgui.cn/article/202504121629239.png" alt="image-20250412162921171"></p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
</search>
